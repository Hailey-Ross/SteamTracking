// Generated by Haxe 3.4.7
(function ($hx_exports, $global) { "use strict";
$hx_exports["Main"] = $hx_exports["Main"] || {};
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var BoxEntry = function() {
	this.tags = [];
	this.tagEntries = [];
	this.tagCategories = [];
};
BoxEntry.__name__ = true;
BoxEntry.prototype = {
	toString: function() {
		return "BoxEntry(" + this.appid + "," + this.title + "," + this.url + "," + this.shortDescription + "," + this.screenshot + ")";
	}
	,setPrice: function(cents) {
		var priceStr = "$" + (cents / 100 | 0) + "." + (cents % 100 | 0);
		this.discountBlock = "<div class=\"discount_block  no_discount\" data-price-final=\"" + cents + "\"><div class=\"discount_prices\"><div class=\"discount_final_price\">" + priceStr + "</div></div></div>";
	}
	,clear: function() {
		this.appid = "";
		this.title = "";
		this.discountBlock = "";
		this.comingSoon = false;
		this.screenshot = "";
		this.screenshots = [];
		this.recommender = "";
		this.microtrailer_webm = "";
		this.microtrailer_mpeg4 = "";
		this.trailer_webm = "";
		this.trailer_mpeg4 = "";
		this.tags = [];
		this.tagEntries = [];
		this.tagCategories = [];
		this.url = "";
		this.shortDescription = "";
	}
	,makeTagEntries: function(focusedTags) {
		this.tagEntries = [];
		this.tags.sort(function(a,b) {
			if(a.count < b.count) {
				return -1;
			}
			if(a.count > b.count) {
				return 1;
			}
			return 0;
		});
		var _g = 0;
		var _g1 = this.tags;
		while(_g < _g1.length) {
			var tag = _g1[_g];
			++_g;
			var found = false;
			if(focusedTags != null && focusedTags.length > 0) {
				var _g2 = 0;
				while(_g2 < focusedTags.length) {
					var fTag = focusedTags[_g2];
					++_g2;
					if(fTag.tagid == tag.tagid) {
						found = true;
						break;
					}
				}
			} else {
				found = true;
			}
			if(found) {
				this.tagEntries.push({ name : tag.name, tagid : tag.tagid, highlighted : true});
			} else {
				this.tagEntries.push({ name : tag.name, tagid : tag.tagid, highlighted : false});
			}
		}
	}
	,getTagHTML2: function(maxLines) {
		if(maxLines == null) {
			maxLines = 3;
		}
		var str = "";
		if(this.tagCategories != null) {
			var genreIndex = -1;
			var i = 0;
			var hasWarning = false;
			var _g = 0;
			var _g1 = this.tagCategories;
			while(_g < _g1.length) {
				var cat = _g1[_g];
				++_g;
				if(cat.category.indexOf("genre") != -1) {
					genreIndex = i;
					break;
				} else {
					var tmp = cat.category.indexOf("content") != -1;
				}
				++i;
			}
			i = 0;
			var lines = 0;
			str += "<div>";
			var allTags = [];
			var _g2 = 0;
			var _g11 = this.tagCategories;
			while(_g2 < _g11.length) {
				var cat1 = _g11[_g2];
				++_g2;
				var names = this.getTagNames(cat1.tags);
				var _g21 = 0;
				while(_g21 < names.length) {
					var name = names[_g21];
					++_g21;
					if(name != null && name != "") {
						allTags.push(name);
					}
				}
			}
			var _g3 = 0;
			while(_g3 < allTags.length) {
				var tag = allTags[_g3];
				++_g3;
				if(i >= maxLines * 2) {
					break;
				}
				str += "<p class=\"tag-list\"> " + tag + "</p>";
				++lines;
				++i;
			}
		}
		str += "</div>";
		return str;
	}
	,getTagHTML: function(forHover,maxLines) {
		if(maxLines == null) {
			maxLines = 3;
		}
		if(forHover == null) {
			forHover = false;
		}
		var str = "";
		if(this.tagCategories != null) {
			var genreIndex = -1;
			var i = 0;
			var hasWarning = false;
			var _g = 0;
			var _g1 = this.tagCategories;
			while(_g < _g1.length) {
				var cat = _g1[_g];
				++_g;
				if(cat.category.indexOf("genre") != -1) {
					genreIndex = i;
					break;
				} else {
					var tmp = cat.category.indexOf("content") != -1;
				}
				++i;
			}
			i = 0;
			var lines = 0;
			var _g2 = 0;
			var _g11 = this.tagCategories;
			while(_g2 < _g11.length) {
				var cat1 = _g11[_g2];
				++_g2;
				if(i >= maxLines) {
					break;
				}
				if(cat1.category.indexOf("genre") != -1) {
					if(i > genreIndex) {
						continue;
					}
				}
				if(cat1.category.indexOf("weak") != -1) {
					continue;
				}
				var name = this.getCategoryName(cat1.category);
				var bit = forHover ? "outline/" : "";
				var url = Main.cdnURL + "/labs/diving_bell/emoji/" + bit + name + ".png?t=13\t";
				var label = StrTool.fu(name);
				var tagNames = "";
				var names = this.getTagNames(cat1.tags);
				var _g21 = 0;
				while(_g21 < names.length) {
					var name1 = names[_g21];
					++_g21;
					if(name1 == null || name1 == "") {
						HxOverrides.remove(names,name1);
					}
				}
				tagNames = this.getTagNames(cat1.tags).join(", ");
				if(tagNames != null && tagNames.length > 0) {
					str += "<p class=\"tag-list\"> " + tagNames + "</p>";
					++lines;
				}
				++i;
			}
			if(!forHover) {
				while(lines < maxLines) {
					str += "<p class=\"tag-list\">&nbsp;</p>";
					++lines;
				}
			}
		}
		return str;
	}
	,getTagCloud: function(forHover,maxLines) {
		if(maxLines == null) {
			maxLines = 3;
		}
		if(forHover == null) {
			forHover = false;
		}
		var str = "";
		var wrapTag = "<div class=\"app_tag\">";
		var wrapTag2 = "</div> ";
		var pTag = "<div class=\"hover_tag_row hover_tag_cloud\">";
		var pTag2 = "</div>";
		if(!forHover) {
			wrapTag = "";
			wrapTag2 = "";
			pTag = "<p class=\"tag-cloud\">";
			pTag2 = "</p>";
		}
		var _g = 0;
		var _g1 = this.tagEntries;
		while(_g < _g1.length) {
			var entry = _g1[_g];
			++_g;
			if(str != "" && !forHover) {
				str += " ";
			}
			if(entry.highlighted == true) {
				if(forHover) {
					str += wrapTag + entry.name + wrapTag2;
				} else {
					str += wrapTag + "<strong>" + entry.name + "</strong>" + wrapTag2;
				}
			} else {
				str += wrapTag + entry.name + wrapTag2;
			}
		}
		return pTag + str + pTag2;
	}
	,getCategoryName: function(str) {
		switch(str) {
		case "level design":
			str = "level";
			break;
		case "genre":case "subgenre":case "supergenre":
			str = "genre";
			break;
		default:
			str = str;
		}
		return str;
	}
	,getTagNames: function(tags) {
		var arr = [];
		var _g = 0;
		while(_g < tags.length) {
			var tagId = tags[_g];
			++_g;
			var name = this.getTagName(tagId);
			if(name != "") {
				arr.push(name);
			}
		}
		return arr;
	}
	,getTagName: function(id) {
		var _g = 0;
		var _g1 = this.tagEntries;
		while(_g < _g1.length) {
			var tag = _g1[_g];
			++_g;
			if(tag.tagid == id) {
				return tag.name;
			}
		}
		return "<" + id + ">";
	}
	,setDetails: function(details) {
		if(details == null) {
			this.clear();
			return;
		}
		this.appid = details.appid;
		this.title = details.title;
		this.screenshot = details.thumbnail;
		this.screenshots = details.screenshots != null ? details.screenshots.slice() : [];
		this.microtrailer_webm = details.microtrailer_webm;
		this.microtrailer_mpeg4 = details.microtrailer_mpeg4;
		this.trailer_webm = details.trailer_webm;
		this.trailer_mpeg4 = details.trailer_mpeg4;
		this.discountBlock = details.discount_block;
		this.comingSoon = details.coming_soon;
		this.tags = this.copyTags(details.tags);
		this.url = details.url;
		this.shortDescription = details.shortDescription;
	}
	,copyValuesFrom: function(other) {
		this.appid = other.appid;
		this.title = other.title;
		this.discountBlock = other.discountBlock;
		this.comingSoon = other.comingSoon;
		this.screenshot = other.screenshot;
		this.screenshots = other.screenshots != null ? other.screenshots.slice() : [];
		this.recommender = other.recommender;
		this.microtrailer_webm = other.microtrailer_webm;
		this.microtrailer_mpeg4 = other.microtrailer_mpeg4;
		this.trailer_webm = other.trailer_webm;
		this.trailer_mpeg4 = other.trailer_mpeg4;
		this.tags = this.copyTags(other.tags);
		this.tagEntries = this.copyTagEntries(other.tagEntries);
		this.tagCategories = this.copyTagCategories(other.tagCategories);
		this.url = other.url;
		this.shortDescription = other.shortDescription;
	}
	,copyTagCategories: function(otherCategories) {
		var arr = [];
		var _g = 0;
		while(_g < otherCategories.length) {
			var t = otherCategories[_g];
			++_g;
			arr.push({ category : t.category, score : t.score, tags : t.tags.slice()});
		}
		return arr;
	}
	,copyTagEntries: function(otherEntries) {
		var arr = [];
		var _g = 0;
		while(_g < otherEntries.length) {
			var t = otherEntries[_g];
			++_g;
			arr.push({ tagid : t.tagid, name : t.name, highlighted : t.highlighted});
		}
		return arr;
	}
	,copyTags: function(otherTags) {
		var arr = [];
		if(otherTags == null) {
			return arr;
		}
		var _g = 0;
		while(_g < otherTags.length) {
			var t = otherTags[_g];
			++_g;
			arr.push({ tagid : t.tagid, name : t.name, count : t.count, browseable : t.browseable});
		}
		return arr;
	}
	,copy: function() {
		var be = new BoxEntry();
		be.copyValuesFrom(this);
		return be;
	}
	,__class__: BoxEntry
};
var Data = function() { };
Data.__name__ = true;
Data.getLocs = function(callback) {
	Data.request("dblocs",[],function(str) {
		var data = JSON.parse(str);
		if(data != null) {
			var map = new haxe_ds_StringMap();
			var _g = 0;
			var _g1 = Reflect.fields(data);
			while(_g < _g1.length) {
				var field = _g1[_g];
				++_g;
				var value = Reflect.field(data,field);
				if(__map_reserved[field] != null) {
					map.setReserved(field,value);
				} else {
					map.h[field] = value;
				}
			}
			callback(map);
		} else {
			callback(null);
		}
	},function(error) {
		callback(null);
	});
};
Data.getVariables = function() {
	var map = new haxe_ds_StringMap();
	var href = window.location.href;
	var arr = href.split("?");
	if(arr != null && arr.length >= 2) {
		var varStr = arr[1];
		var vars = varStr.split("&");
		var _g = 0;
		while(_g < vars.length) {
			var variable = vars[_g];
			++_g;
			var nameValue = variable.split("=");
			if(nameValue != null && nameValue.length >= 2) {
				var name = nameValue[0];
				var value = nameValue[1];
				if(__map_reserved[name] != null) {
					map.setReserved(name,value);
				} else {
					map.h[name] = value;
				}
			}
		}
	}
	return map;
};
Data.getTagCategories = function(callback) {
	var categories = null;
	categories = g_DivingBellTagCategories;
	var map = Data.jsonToMapStrArrOfStr(categories);
	callback(map);
};
Data.getCDNURL = function(callback) {
	Data.request("dbcdnurl",[],function(str) {
		var data = JSON.parse(str);
		callback(data.url);
	},function(error) {
		callback(null);
	});
};
Data.getLinkParam = function(param,callback) {
	Data.request("dbgetlinkparam/" + param,[],function(str) {
		callback(str);
	},function(error) {
		callback(null);
	});
};
Data.filterMatches = function(matches) {
	var map = matches.map;
	var storeItemData = matches.storeItemData;
	var rgApps = storeItemData != null ? storeItemData.rgApps : null;
	var exclusions = [];
	var showVR = Main.prefs.show_vr;
	var showEA = Main.prefs.show_early_access;
	var showPreorder = Main.prefs.show_prepurchase;
	var tagsToExclude = Main.prefs.tags_to_exclude;
	var showLocalized = true;
	if(!rgApps != null) {
		var _g = 0;
		var _g1 = Reflect.fields(rgApps);
		while(_g < _g1.length) {
			var field = _g1[_g];
			++_g;
			var appid = field;
			var object = Reflect.field(rgApps,field);
			if(object != null) {
				var excluded = false;
				var isLocalized = Object.prototype.hasOwnProperty.call(object,"localized") && Reflect.field(object,"localized");
				var isVR = Object.prototype.hasOwnProperty.call(object,"virtual_reality") && Reflect.field(object,"virtual_reality");
				var isEA = Object.prototype.hasOwnProperty.call(object,"early_access") && Reflect.field(object,"early_access");
				if(!showVR && isVR) {
					excluded = true;
				}
				if(!showEA && isEA) {
					excluded = true;
				}
				if(showLocalized && !isLocalized) {
					excluded = true;
				}
				if(excluded) {
					exclusions.push(appid);
				} else {
					var os_windows = Object.prototype.hasOwnProperty.call(object,"os_windows") && Reflect.field(object,"os_windows");
					var os_mac = Object.prototype.hasOwnProperty.call(object,"os_mac") && Reflect.field(object,"os_mac");
					var os_linux = Object.prototype.hasOwnProperty.call(object,"os_linux") && Reflect.field(object,"os_linux");
					var numPlatforms = Main.prefs.prefs.platform_linux + Main.prefs.prefs.platform_mac + Main.prefs.prefs.platform_windows;
					if(numPlatforms > 0) {
						var matchesOSFilters = 0;
						if(os_linux && Main.prefs.prefs.platform_linux == 1) {
							++matchesOSFilters;
						}
						if(os_mac && Main.prefs.prefs.platform_mac == 1) {
							++matchesOSFilters;
						}
						if(os_windows && Main.prefs.prefs.platform_windows == 1) {
							++matchesOSFilters;
						}
						if(matchesOSFilters == 0) {
							exclusions.push(appid);
						}
					}
				}
				if(!excluded) {
					var _this = matches.tags;
					var tags = __map_reserved[appid] != null ? _this.getReserved(appid) : _this.h[appid];
					if(tags != null && tags.length > 0) {
						var _g2 = 0;
						while(_g2 < tagsToExclude.length) {
							var badTag = tagsToExclude[_g2];
							++_g2;
							if(tags.indexOf(badTag) != -1) {
								exclusions.push(appid);
								break;
							}
						}
					}
				}
			}
		}
	}
	var rec = map.keys();
	while(rec.hasNext()) {
		var rec1 = rec.next();
		var list = __map_reserved[rec1] != null ? map.getReserved(rec1) : map.h[rec1];
		if(list != null && list.length > 0) {
			var _g3 = 0;
			while(_g3 < exclusions.length) {
				var exclusion = exclusions[_g3];
				++_g3;
				var i = Data.cheapIndexOf(list,exclusion);
				if(i != -1) {
					list.splice(i,1);
				}
			}
			if(__map_reserved[rec1] != null) {
				map.setReserved(rec1,list);
			} else {
				map.h[rec1] = list;
			}
		}
	}
	var rgApps1 = matches.storeItemData.rgApps;
	var apps = [];
	var _g4 = 0;
	var _g11 = Reflect.fields(rgApps1);
	while(_g4 < _g11.length) {
		var field1 = _g11[_g4];
		++_g4;
		if(Data.cheapIndexOf(exclusions,field1) != -1) {
			continue;
		}
		apps.push(field1 == null ? "null" : "" + field1);
	}
	exclusions = [];
	var results = GlobalStuff.filterItemsForDisplay(matches.storeItemData);
	var _g5 = 0;
	while(_g5 < results.length) {
		var result = results[_g5];
		++_g5;
		if(Data.cheapIndexOf(apps,result) != -1) {
			exclusions.push(result);
		}
	}
	var rec2 = map.keys();
	while(rec2.hasNext()) {
		var rec3 = rec2.next();
		var list1 = __map_reserved[rec3] != null ? map.getReserved(rec3) : map.h[rec3];
		if(list1 != null && list1.length > 0) {
			var _g6 = 0;
			while(_g6 < exclusions.length) {
				var exclusion1 = exclusions[_g6];
				++_g6;
				if(Data.cheapIndexOf(list1,exclusion1) != -1) {
					HxOverrides.remove(list1,exclusion1);
				}
			}
			if(__map_reserved[rec3] != null) {
				map.setReserved(rec3,list1);
			} else {
				map.h[rec3] = list1;
			}
		}
	}
	return matches.map;
};
Data.getMatches = function(appid,recommenders,callback) {
	var recString = recommenders.join("-");
	Data.request("dbapi/" + appid + "/matches/" + recString,[{ name : "beta_divingbell", value : "1"}],function(data) {
		var map = null;
		try {
			var matchData = Data.parseMatches(data);
			map = Data.filterMatches(matchData);
		} catch( msg ) {
			if (msg instanceof js__$Boot_HaxeError) msg = msg.val;
			console.log("msg = " + Std.string(msg));
			console.log("data = \n" + data);
		}
		callback(map);
	},function(error) {
		callback(null);
	});
};
Data.parseMatches = function(data) {
	var json = JSON.parse(data);
	if(json == null) {
		return null;
	}
	var storeItemData = json.storeitemdata;
	var map = new haxe_ds_StringMap();
	var tags = new haxe_ds_StringMap();
	var _g = 0;
	var _g1 = Reflect.fields(json);
	while(_g < _g1.length) {
		var field = _g1[_g];
		++_g;
		if(field != "storeitemdata" && field != "tags") {
			var arr = Reflect.field(json,field);
			if(arr != null) {
				if(__map_reserved[field] != null) {
					map.setReserved(field,arr);
				} else {
					map.h[field] = arr;
				}
			}
		} else if(field == "tags") {
			var tagBlob = Reflect.field(json,field);
			var _g2 = 0;
			var _g3 = Reflect.fields(tagBlob);
			while(_g2 < _g3.length) {
				var field1 = _g3[_g2];
				++_g2;
				var arr1 = Reflect.field(tagBlob,field1);
				if(arr1 != null) {
					if(__map_reserved[field1] != null) {
						tags.setReserved(field1,arr1);
					} else {
						tags.h[field1] = arr1;
					}
				}
			}
		}
	}
	return { map : map, tags : tags, storeItemData : storeItemData};
};
Data.getWishlist = function(callback) {
	Data.request("dbwishlist",[],function(data) {
		var json = JSON.parse(data);
		var wishlist = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = Reflect.fields(json);
		while(_g < _g1.length) {
			var field = _g1[_g];
			++_g;
			var appid = field;
			var priority = 0;
			var added = 0;
			try {
				var obj = Reflect.field(json,field);
				priority = Reflect.field(obj,"priority");
				added = Reflect.field(obj,"added");
			} catch( msg ) {
				priority = 0;
				added = 0;
			}
			var entry = { appid : appid, priority : priority, added : added};
			if(__map_reserved[appid] != null) {
				wishlist.setReserved(appid,entry);
			} else {
				wishlist.h[appid] = entry;
			}
		}
		callback(wishlist);
	},function(error) {
		callback(new haxe_ds_StringMap());
	});
};
Data.getUserLoggedIn = function(callback) {
	Data.request("dbloggedin",[],function(data) {
		if(data == "true") {
			callback(true);
		} else {
			callback(false);
		}
	},function(error) {
		callback(false);
	});
};
Data.getStarterApps = function(callback) {
	Data.getMostPlayedUserApps(function(results) {
		if(results.length < 9) {
			Data.getSomeTopGlobalApps(function(moreResults) {
				results = results.concat(moreResults);
				callback(results);
			});
		} else {
			callback(results);
		}
	});
};
Data.randomInteger = function(min,max) {
	return (Math.random() * js_Boot.__cast(1 + max - min , Float) | 0) + min;
};
Data.shuffle = function(list) {
	var _g1 = 0;
	var _g = list.length - 1;
	while(_g1 < _g) {
		var i = _g1++;
		var ii = list.length - 1 - i;
		if(ii > 1) {
			var j = Math.random() * js_Boot.__cast(1 + ii , Float) | 0;
			var temp = list[j];
			list[j] = list[ii];
			list[ii] = temp;
		}
	}
	return list;
};
Data.getSomeTopGlobalApps = function(callback) {
	Data.request("dbstartrecs",[],function(data) {
		if(data != null) {
			var arr = JSON.parse(data);
			if(arr != null && arr.length > 0) {
				arr = Data.shuffle(arr);
			}
			callback(arr);
		} else {
			callback([]);
		}
	},function(error) {
		callback([]);
	});
};
Data.getMostPlayedUserApps = function(callback) {
	Data.request("dbmostplayeduserapps",[],function(data) {
		var json = JSON.parse(data);
		var arr = json;
		if(arr == null) {
			arr = [];
		}
		callback(arr);
	},function(error) {
		callback([]);
	});
};
Data.getPreferences = function(callback) {
	Data.request("dbprefs",[],function(data) {
		var json = JSON.parse(data);
		var prefs = json;
		callback(prefs);
	},function(error) {
		callback(null);
	});
};
Data.getDetails = function(appid,callback) {
	if(appid == "") {
		callback(null);
	}
	Data.request("dbdetails/" + appid,[{ name : "beta_divingbell", value : "1"}],function(data) {
		var json = JSON.parse(data);
		callback(json);
	},function(error) {
		callback(null);
	});
};
Data.getDetailsMulti = function(appids,callback) {
	var arr = appids.join("-");
	Data.request("dbdetailsmulti/" + arr,[{ name : "beta_divingbell", value : "1"}],function(data) {
		var json = null;
		var arr1 = null;
		try {
			json = JSON.parse(data);
			arr1 = json;
		} catch( msg ) {
			if (msg instanceof js__$Boot_HaxeError) msg = msg.val;
			console.log("getDetailsMulti(" + Std.string(appids) + ") ERROR(" + Std.string(msg) + ") parsing data:\n" + data);
		}
		callback(arr1);
	},function(error) {
		callback(null);
	});
};
Data.request = function(url,params,onData,onError) {
	var query = new haxe_Http(url);
	var _g = 0;
	while(_g < params.length) {
		var param = params[_g];
		++_g;
		query.addParameter(param.name,param.value);
	}
	query.onStatus = function(i) {
		if(i != 200) {
			onError("HTTP Status " + i);
		}
	};
	query.onData = function(data) {
		onData(data);
	};
	query.onError = function(error) {
		console.log("HTTP Error = " + Std.string(error));
		onError(error);
	};
	query.request();
};
Data.jsonToMapStrArrOfStr = function(json) {
	var map = new haxe_ds_StringMap();
	if(json == null) {
		return map;
	}
	var _g = 0;
	var _g1 = Reflect.fields(json);
	while(_g < _g1.length) {
		var field = _g1[_g];
		++_g;
		if(field != null && field != "") {
			var values = Reflect.field(json,field);
			if(values != null) {
				if(__map_reserved[field] != null) {
					map.setReserved(field,values);
				} else {
					map.h[field] = values;
				}
			}
		}
	}
	return map;
};
Data.cheapIndexOf = function(arr,value) {
	var _g1 = 0;
	var _g = arr.length;
	while(_g1 < _g) {
		var i = _g1++;
		var arrValue = arr[i];
		if(arrValue == value) {
			return i;
		}
	}
	return -1;
};
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = true;
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,__class__: EReg
};
var EggTimer = function(msPerTick,ticks,callback,clearOnStop,stopOnSuccess) {
	if(stopOnSuccess == null) {
		stopOnSuccess = false;
	}
	if(clearOnStop == null) {
		clearOnStop = false;
	}
	this.msPerTick = msPerTick;
	this.ticks = ticks;
	this.clearOnStop = clearOnStop;
	this.msMax = msPerTick * ticks;
	this.msRemaining = this.msMax;
	this.callback = callback;
	this.stopOnSuccess = stopOnSuccess;
};
EggTimer.__name__ = true;
EggTimer.runUntilItWorks = function(delayInMs,callback) {
	var e = new EggTimer(delayInMs,-1,callback,true);
	e.start();
};
EggTimer.runOnce = function(delayInMs,callback) {
	var e = new EggTimer(delayInMs,1,callback,true);
	e.start();
};
EggTimer.prototype = {
	stop: function() {
		if(this.timer != null) {
			this.timer.stop();
			this.msRemaining = this.msMax;
			this.timer = null;
			if(this.clearOnStop) {
				this.callback = null;
			}
		}
	}
	,start: function() {
		var _gthis = this;
		this.stop();
		this.timer = new haxe_Timer(this.msPerTick);
		this.timer.run = function() {
			_gthis.msRemaining -= _gthis.msPerTick;
			if(_gthis.msRemaining <= 0 && _gthis.ticks != -1) {
				_gthis.msRemaining = 0;
				_gthis.timer.stop();
			}
			if(_gthis.callback != null) {
				var result = _gthis.callback();
				if(result) {
					_gthis.stop();
				}
			}
		};
	}
	,__class__: EggTimer
};
var GlobalStuff = function() { };
GlobalStuff.__name__ = true;
GlobalStuff.show = function(element,b) {
	if(!b) {
		GlobalStuff.addClass(element,"hide-fancy");
	} else {
		GlobalStuff.removeClass(element,"hide-fancy");
	}
};
GlobalStuff.hardHide = function(element) {
	var style = element.getAttribute("style");
	var styleArr = style.split(";");
	var newStyleArr = [];
	var _g = 0;
	while(_g < styleArr.length) {
		var styleBit = styleArr[_g];
		++_g;
		var bits = styleBit.split(":");
		var i = bits[0].indexOf("display");
		if(i != -1) {
			bits[1] = "none";
		}
		newStyleArr.push(bits.join(": "));
	}
	var newStyle = newStyleArr.join("; ");
	element.setAttribute("style",newStyle);
};
GlobalStuff.hasClass = function(element,className) {
	var classStr = element.getAttribute("class");
	if(classStr != "" && classStr != null) {
		var classes = classStr.split(" ");
		if(classes.length > 0) {
			if(classes.indexOf(className) != -1) {
				return true;
			}
		}
	}
	return false;
};
GlobalStuff.addClass = function(element,className) {
	var classStr = element.getAttribute("class");
	if(classStr != "" && classStr != null) {
		var classes = classStr.split(" ");
		if(classes.length > 0) {
			if(classes.indexOf(className) == -1) {
				classes.push(className);
				element.setAttribute("class",classes.join(" "));
			}
		}
	}
};
GlobalStuff.removeClass = function(element,className) {
	var classStr = element.getAttribute("class");
	if(classStr != "" && classStr != null) {
		var classes = classStr.split(" ");
		if(classes.length > 0) {
			if(classes.indexOf(className) != -1) {
				HxOverrides.remove(classes,className);
				element.setAttribute("class",classes.join(" "));
			}
		}
	}
};
GlobalStuff.bindHoverEvents = function(elementId,appIdInt,showTooltip,onMouseEnterCallback,onMouseLeaveCallback) {
	if(GlobalStuff.map == null) {
		GlobalStuff.map = new haxe_ds_StringMap();
	}
	var _this = GlobalStuff.map;
	if(__map_reserved[elementId] != null ? _this.existsReserved(elementId) : _this.h.hasOwnProperty(elementId)) {
		var test = window.document.getElementById(elementId);
		var _this1 = GlobalStuff.map;
		var old = __map_reserved[elementId] != null ? _this1.getReserved(elementId) : _this1.h[elementId];
		$J($(elementId)).data( 'oHoverState', null);
	}
	var onMouseEnter = function(event) {
		if(onMouseEnterCallback != null) {
			onMouseEnterCallback();
		}
		if(showTooltip) {
			
					if(appIdInt != null){
						GameHover( $(elementId), event, $J('#global_hover'), GStoreItemData.GetHoverParams(appIdInt));
					}
				;
		}
	};
	var onMouseLeave = function(event1) {
		if(onMouseLeaveCallback != null) {
			onMouseLeaveCallback();
		}
		if(showTooltip) {
			
					HideGameHover( $(elementId), event, $J('#global_hover') );
				;
		}
	};
	var el = window.document.getElementById(elementId);
	if(el != null) {
		el.onmouseenter = onMouseEnter;
		el.onmouseleave = onMouseLeave;
		var _this2 = GlobalStuff.map;
		if(__map_reserved[elementId] != null) {
			_this2.setReserved(elementId,el);
		} else {
			_this2.h[elementId] = el;
		}
	}
};
GlobalStuff.filterItemsForDisplay = function(storeItemData) {
	var results = null;
	var rgApps = storeItemData.rgApps;
	var apps = [];
	var _g = 0;
	var _g1 = Reflect.fields(rgApps);
	while(_g < _g1.length) {
		var field = _g1[_g];
		++_g;
		apps.push({ appid : field, bundleid : "", packageId : ""});
	}
	
			
			GStoreItemData.AddStoreItemDataSet(storeItemData);
			
			results = GDynamicStorePage.FilterItemsForDisplay(apps, null, 
				{
					games_already_in_library: false, 
					localized: true,
				}, 
				200, 8
			);
		;
	var newApps = [];
	var _g2 = 0;
	while(_g2 < results.length) {
		var result = results[_g2];
		++_g2;
		newApps.push(result.appid);
	}
	return newApps;
};
GlobalStuff.injectSearch = function() {
	injectSearch();
};
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Lambda = function() { };
Lambda.__name__ = true;
Lambda.exists = function(it,f) {
	var x = $iterator(it)();
	while(x.hasNext()) {
		var x1 = x.next();
		if(f(x1)) {
			return true;
		}
	}
	return false;
};
var List = function() {
	this.length = 0;
};
List.__name__ = true;
List.prototype = {
	push: function(item) {
		var x = new _$List_ListNode(item,this.h);
		this.h = x;
		if(this.q == null) {
			this.q = x;
		}
		this.length++;
	}
	,iterator: function() {
		return new _$List_ListIterator(this.h);
	}
	,__class__: List
};
var _$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
_$List_ListNode.__name__ = true;
_$List_ListNode.prototype = {
	__class__: _$List_ListNode
};
var _$List_ListIterator = function(head) {
	this.head = head;
};
_$List_ListIterator.__name__ = true;
_$List_ListIterator.prototype = {
	hasNext: function() {
		return this.head != null;
	}
	,next: function() {
		var val = this.head.item;
		this.head = this.head.next;
		return val;
	}
	,__class__: _$List_ListIterator
};
var Main = function() { };
Main.__name__ = true;
Main.main = function() {
	Main.userVariables = Data.getVariables();
	Main.recordOriginalHistoryPath(Main.userVariables);
	var hash = window.location.hash;
	if(hash != "") {
		hash = StringTools.replace(hash,"#","");
		Main.APPID = hash;
	}
	window.onpopstate = Main.onPopState;
	window.onhashchange = Main.onHashChange;
	GDynamicStore.OnReady(Main.onLoad);
};
Main.getCurrentHistoryPath = function(useAsFocusedApp,useAsBreadcrumbs) {
	var history = "#";
	var i = 0;
	var theFocusedApp = useAsFocusedApp != null ? useAsFocusedApp : Main.focusedEntry != null ? Main.focusedEntry.appid : "";
	var theBreadcrumbs = useAsBreadcrumbs != null ? useAsBreadcrumbs : Main.breadcrumbs;
	var appids = theBreadcrumbs == null ? [] : theBreadcrumbs.slice();
	while(appids.indexOf("") != -1) HxOverrides.remove(appids,"");
	if(theFocusedApp != null && theFocusedApp != "") {
		appids.push(theFocusedApp);
	}
	appids.reverse();
	var appidStr = appids.join(",");
	history += appidStr;
	if(history != "#") {
		history = Main.originalHistory + history;
	} else {
		history = Main.originalHistory;
	}
	return history;
};
Main.recordOriginalHistoryPath = function(vars) {
	var str = "";
	var key = vars.keys();
	while(key.hasNext()) {
		var key1 = key.next();
		if(key1 != "appid") {
			if(str == "") {
				str += "?";
			} else {
				str += "&";
			}
			var value = __map_reserved[key1] != null ? vars.getReserved(key1) : vars.h[key1];
			if(value.indexOf("#") != -1) {
				value = value.split("#")[0];
			}
			str += key1 + "=" + value;
		}
	}
	Main.originalHistory = str;
};
Main.base64Encode = function(n) {
	var chars = "";
	while(n > 0) {
		var digit = n % 64;
		var $char = Main.baseMap.charAt(digit);
		chars = $char + chars;
		n = Math.floor(n / 64);
	}
	return chars;
};
Main.base64Decode = function(str) {
	var value = 0.0;
	var place = 0;
	while(str.length > 0) {
		var $char = str.charAt(str.length - 1);
		str = HxOverrides.substr(str,0,str.length - 1);
		var num = Main.baseMap.indexOf($char);
		value += num * Math.pow(64,place);
		++place;
	}
	return value | 0;
};
Main.onHashChange = function(event) {
	console.log("onHashChange() " + window.location.hash);
};
Main.onPopState = function(event) {
	if(!Main.justClickedAppBack && !Main.justClickedBreadcrumb) {
		Main.back();
	} else {
		var path = Main.getCurrentHistoryPath();
		window.history.replaceState(null,"",path);
		Main.justClickedBreadcrumb = false;
		Main.justClickedAppBack = false;
	}
};
Main.getBlankAppIds = function() {
	return ["","","","","","","","",""];
};
Main.getTestAppIds = function() {
	return ["670750","243220","512790","866440","258520","251110","383870","757480","239030"];
};
Main.getPreviousAppIdsForHistory = function() {
	var boxes = [];
	var _g = 0;
	var _g1 = Main.breadcrumbBoxEntries;
	while(_g < _g1.length) {
		var arr = _g1[_g];
		++_g;
		var appids = [];
		var _g2 = 0;
		while(_g2 < arr.length) {
			var entry = arr[_g2];
			++_g2;
			if(entry.appid != "" && entry.appid != null) {
				appids.push(Main.base64Encode(Std.parseInt(entry.appid)));
			}
		}
		var appidStr = appids.join(",");
		boxes.push(appidStr);
	}
	var boxStr = boxes.join("-");
	var refreshes = [];
	var _g3 = 0;
	var _g11 = Main.refreshHistory;
	while(_g3 < _g11.length) {
		var arr1 = _g11[_g3];
		++_g3;
		var appids1 = [];
		var _g21 = 0;
		while(_g21 < arr1.length) {
			var entry1 = arr1[_g21];
			++_g21;
			if(entry1.appid != "" && entry1.appid != null) {
				appids1.push(Main.base64Encode(Std.parseInt(entry1.appid)));
			}
		}
		var appidStr1 = appids1.join(",");
		refreshes.push(appidStr1);
	}
	var refreshStr = refreshes.join("-");
	return "&bx=" + boxStr + "&rf=" + refreshStr;
};
Main.getPreviousAppIds = function() {
	var appids = [];
	var _g = 0;
	var _g1 = Main.breadcrumbBoxEntries;
	while(_g < _g1.length) {
		var arr = _g1[_g];
		++_g;
		var _g2 = 0;
		while(_g2 < arr.length) {
			var entry = arr[_g2];
			++_g2;
			if(entry.appid != "" && appids.indexOf(entry.appid) == -1) {
				appids.push(entry.appid);
			}
		}
	}
	var _g3 = 0;
	var _g11 = Main.refreshHistory;
	while(_g3 < _g11.length) {
		var arr1 = _g11[_g3];
		++_g3;
		var _g21 = 0;
		while(_g21 < arr1.length) {
			var entry1 = arr1[_g21];
			++_g21;
			if(entry1.appid != "" && appids.indexOf(entry1.appid) == -1) {
				appids.push(entry1.appid);
			}
		}
	}
	var _g4 = 0;
	var _g12 = Main.breadcrumbs;
	while(_g4 < _g12.length) {
		var breadcrumbid = _g12[_g4];
		++_g4;
		if(breadcrumbid != "" && appids.indexOf(breadcrumbid) == -1) {
			appids.push(breadcrumbid);
		}
	}
	if(Main.focusedEntry != null) {
		if(Main.focusedEntry.appid != "" && appids.indexOf(Main.focusedEntry.appid) == -1) {
			appids.push(Main.focusedEntry.appid);
		}
	}
	return appids;
};
Main.compareAppLists = function(appids,others) {
	var str1 = appids != null ? appids.join(",") : "null";
	var str2 = others != null ? others.join(",") : null;
	return str1 == str2;
};
Main.getBoxEntriesFor = function(appids,recommenders,callback) {
	var boxEntries = [];
	var matchesStarters = Main.compareAppLists(appids,Main.STARTER_APPS);
	if(matchesStarters) {
		Main.STARTER_BOXES = [];
	}
	var _g = 0;
	while(_g < 9) {
		var i = _g++;
		boxEntries.push(new BoxEntry());
	}
	Data.getDetailsMulti(appids,function(details) {
		if(details == null) {
			console.log("ERROR: couldn't get details for (" + Std.string(appids) + ")");
		} else {
			var i1 = 0;
			var _g1 = 0;
			while(_g1 < details.length) {
				var detail = details[_g1];
				++_g1;
				if(i1 >= 9) {
					break;
				}
				var isError = Object.prototype.hasOwnProperty.call(detail,"appid") == false;
				if(isError) {
					boxEntries[i1].appid = "";
					Main.setBoxDetails(boxEntries[i1],null);
					boxEntries[i1].recommender = "";
					++i1;
				} else {
					var appid = detail.appid;
					if(detail != null) {
						var arrIndex = -1;
						var _g2 = 0;
						var _g11 = appids.length;
						while(_g2 < _g11) {
							var j = _g2++;
							var otherappid = appids[j];
							if(appid == otherappid) {
								arrIndex = j;
								break;
							}
						}
						boxEntries[i1].appid = appid;
						Main.setBoxDetails(boxEntries[i1],detail);
						boxEntries[i1].recommender = arrIndex != -1 ? recommenders[arrIndex] : "";
						++i1;
					}
				}
			}
			if(matchesStarters) {
				var _g3 = 0;
				while(_g3 < boxEntries.length) {
					var entry = boxEntries[_g3];
					++_g3;
					var entry2 = entry.copy();
					Main.STARTER_BOXES.push(entry2);
				}
			}
			callback(boxEntries);
		}
	});
};
Main.sinkBoxes = function(show) {
	var _g1 = 0;
	var _g = Main.boxEntries.length;
	while(_g1 < _g) {
		var i = _g1++;
		Render.sinkBox(i,show);
	}
};
Main.renderBreadcrumbs = function() {
	var forShow = Main.breadcrumbs.slice();
	var forShowTitles = Main.breadcrumbTitles.slice();
	if(Main.focusedEntry != null) {
		forShow.push(Main.focusedEntry.appid);
		forShowTitles.push(Main.focusedEntry.title);
	}
	var breadcrumbNode = window.document.getElementById("breadcrumbs");
	breadcrumbNode.innerHTML = Render.breadcrumbsContent(forShow,forShowTitles);
};
Main.renderBackRefreshButtons = function() {
	var enableBack = Main.refreshHistory.length > 0 || Main.breadcrumbs.length > 0 || Main.focusedEntry != null;
	var enableRefresh = Main.lastMatchCount >= 9 || Main.lastMatchCount == -1;
	var back = window.document.getElementById("button-back");
	var refresh = window.document.getElementById("button-refresh");
	if(!enableBack) {
		back.setAttribute("class","button-back button-round disabled");
	} else {
		back.setAttribute("class","button-back button-round");
	}
	if(!enableRefresh) {
		refresh.setAttribute("class","button-refresh button-round disabled");
	} else {
		refresh.setAttribute("class","button-refresh button-round");
	}
};
Main.renderFocusedBox = function() {
	var focusBoxNode = window.document.getElementById("box-focused");
	var appid = Main.focusedEntry != null ? Main.focusedEntry.appid : "";
	if(appid == "") {
		focusBoxNode.innerHTML = Render.searchBoxContent();
		var searchNode = window.document.getElementById("search_suggestion_contents");
		if(Main.searchObserver != null) {
			Main.searchObserver.disconnect();
			Main.searchObserver = null;
			Main.searchObserver = new MutationObserver(Main.onMutateSearchNode);
			Main.searchObserver.observe(searchNode,{ attributes : true, childList : true, subtree : true});
			GlobalStuff.injectSearch();
		}
	} else {
		focusBoxNode.innerHTML = Render.focusBoxContent(Main.focusedEntry);
	}
	var searchNameNode = window.document.getElementById("search-name");
	if(searchNameNode != null) {
		searchNameNode.focus();
	}
};
Main.countHistory = function() {
	return Main.breadcrumbs.length + (Main.focusedEntry != null ? 1 : 0);
};
Main.renderBoxes = function(sink) {
	if(sink == null) {
		sink = false;
	}
	var _g1 = 0;
	var _g = Main.boxEntries.length;
	while(_g1 < _g) {
		var i = _g1++;
		var boxNode = window.document.getElementById("box-" + i);
		if(boxNode != null) {
			var entry = Main.boxEntries[i];
			boxNode.innerHTML = Render.boxContent(i,entry,sink,Main.countHistory() == 0);
			if(entry == null || entry.appid == null || entry.appid == "") {
				GlobalStuff.addClass(boxNode,"empty-result");
			} else {
				GlobalStuff.removeClass(boxNode,"empty-result");
			}
		}
	}
};
Main.getStarterApps = function(callback) {
	Data.getStarterApps(function(startIds) {
		if(startIds.length < 9) {
			var testIds = Main.getTestAppIds();
			while(startIds.length < 9) {
				var testId = testIds.shift();
				startIds.push(testId);
			}
		}
		Main.STARTER_APPS = startIds.slice();
		callback(startIds);
	});
};
Main.renderPage = function(callback) {
	Main.domRoot = window.document.getElementById("diving-bell-content");
	if(Main.boxEntries == null) {
		var recommenders = ["","","","","","","","",""];
		var loadIds = function(appids) {
			Main.getBoxEntriesFor(appids,recommenders,function(entries) {
				Main.boxEntries = entries;
				Main._renderPage();
				Main.updateBoxes();
				callback();
			});
		};
		if(Main.APPID == "") {
			Main.getStarterApps(loadIds);
		} else {
			Main.STARTER_APPS = Main.getBlankAppIds();
			loadIds(Main.getBlankAppIds());
		}
	} else {
		Main._renderPage();
		callback();
	}
};
Main._renderPage = function() {
	Main.clear();
	var tmp = Render.breadcrumbs();
	var tmp1 = Render.grid(Main.boxEntries,Main.focusedEntry,false,Main.countHistory() == 0);
	Main.domRoot.innerHTML = tmp + tmp1;
	var searchNameNode = window.document.getElementById("search-name");
	if(searchNameNode != null) {
		searchNameNode.focus();
	}
};
Main.init = function(callback) {
	Data.getCDNURL(function(url) {
		Main.cdnURL = url;
		Data.getTagCategories(function(map) {
			Main.tagDB = new TagDB(map);
			Data.getPreferences(function(gp) {
				Main.prefs = gp;
				Data.getLocs(function(map1) {
					Main.locs = map1;
					Data.getUserLoggedIn(function(b) {
						Main.LOGGED_IN = b;
						Data.getWishlist(function(list) {
							Main.wishlist = list;
							callback();
						});
					});
				});
			});
		});
	});
};
Main.isOwned = function(appid) {
	if(Main.prefs == null) {
		return false;
	}
	var appid_i = Std.parseInt(appid);
	var _g = 0;
	var _g1 = Main.prefs.owned_apps;
	while(_g < _g1.length) {
		var otherappid_i = _g1[_g];
		++_g;
		if(otherappid_i == appid_i) {
			return true;
		}
	}
	return false;
};
Main.onWishlist = function(appid) {
	var _this = Main.wishlist;
	if(__map_reserved[appid] != null ? _this.existsReserved(appid) : _this.h.hasOwnProperty(appid)) {
		return true;
	}
	if(Data.cheapIndexOf(Main.tempWishlist,appid) != -1) {
		return true;
	}
	return false;
};
Main.loc = function(str) {
	var _this = Main.locs;
	if(__map_reserved[str] != null ? _this.existsReserved(str) : _this.h.hasOwnProperty(str)) {
		var _this1 = Main.locs;
		if(__map_reserved[str] != null) {
			return _this1.getReserved(str);
		} else {
			return _this1.h[str];
		}
	}
	return str;
};
Main.onLoad = function() {
	Main.init(function() {
		Main.renderPage(function() {
			var searchNode = window.document.getElementById("search_suggestion_contents");
			if(searchNode != null) {
				Main.searchObserver = new MutationObserver(Main.onMutateSearchNode);
				Main.searchObserver.observe(searchNode,{ attributes : true, childList : true, subtree : true});
				Main.updateBoxesHover();
				GlobalStuff.injectSearch();
			}
			Main.renderBackRefreshButtons();
			var bodyNode = window.document.getElementsByTagName("body")[0];
			Main.hoverAttachObserver = new MutationObserver(Main.onMutateBody);
			Main.hoverAttachObserver.observe(bodyNode,{ attributes : false, childList : true, subtree : false});
			if(Main.APPID != "") {
				EggTimer.runOnce(10,function() {
					Main.firstLoadApp(Main.APPID);
					return true;
				});
			}
		});
	});
};
Main.firstLoadApp = function(appid) {
	var currApp = appid;
	var apps = appid.split(",");
	if(apps.length > 0) {
		while(apps.indexOf("") != -1) HxOverrides.remove(apps,"");
		var history = apps.slice();
		var states = [];
		var _g1 = 0;
		var _g = history.length;
		while(_g1 < _g) {
			var i = _g1++;
			var focused = history[i];
			var crumbs = history.slice(i + 1,history.length);
			var state = Main.getCurrentHistoryPath(focused,crumbs);
			states.push(state);
		}
		states.push(Main.originalHistory);
		var _g2 = 0;
		while(_g2 < states.length) {
			var state1 = states[_g2];
			++_g2;
			window.history.pushState(null,"",state1);
		}
		currApp = apps.shift();
		Main.breadcrumbs = apps.slice();
		Main.breadcrumbs.reverse();
		Main.breadcrumbs.unshift("");
		var _g11 = 0;
		var _g3 = Main.breadcrumbs.length;
		while(_g11 < _g3) {
			var i1 = _g11++;
			Main.breadcrumbBoxEntries.push([]);
			Main.breadcrumbTitles.push("");
		}
	}
	Main.focus(currApp);
};
Main.onMutateBody = function(mutationList,observer) {
	var hoverNode = window.document.getElementById("global_hover");
	if(hoverNode != null) {
		Main.hoverObserver = new MutationObserver(Main.onMutateHoverNode);
		Main.hoverObserver.observe(hoverNode,{ attributes : false, childList : true, subtree : true});
	}
};
Main.onMutateHoverNode = function(mutationList,observer) {
	var globalHoverContentElement = window.document.getElementById("global_hover_content");
	var hoverAppNode = null;
	var hoverAppId = "";
	var _g = 0;
	while(_g < mutationList.length) {
		var mutation = mutationList[_g];
		++_g;
		if(mutation != null && mutation.addedNodes != null && mutation.addedNodes.length > 0) {
			var _g2 = 0;
			var _g1 = mutation.addedNodes.length;
			while(_g2 < _g1) {
				var i = _g2++;
				var addedNode = mutation.addedNodes.item(i);
				if(addedNode.nodeType == 1) {
					var element = addedNode;
					var id = element.attributes.getNamedItem("id");
					var idValue = "";
					if(id != null) {
						idValue = id.value;
					}
					if(idValue.indexOf("hover_app_") != -1) {
						hoverAppId = StringTools.replace(idValue,"hover_app_","");
						hoverAppNode = element;
					}
				}
			}
		}
	}
	var boxEntry = null;
	var _g3 = 0;
	var _g11 = Main.boxEntries;
	while(_g3 < _g11.length) {
		var entry = _g11[_g3];
		++_g3;
		if(hoverAppId == entry.appid) {
			boxEntry = entry;
			break;
		}
	}
	if(boxEntry == null) {
		if(Main.focusedEntry != null && hoverAppId == Main.focusedEntry.appid) {
			boxEntry = Main.focusedEntry;
		}
	}
	if(hoverAppNode != null && boxEntry != null) {
		if(Main.hoverObserver != null) {
			Main.hoverObserver.disconnect();
			Main.hoverObserver = null;
		}
		var hoverBody2 = hoverAppNode.getElementsByClassName("hover_body")[1];
		if(hoverBody2 != null) {
			hoverBody2.innerHTML = "";
			hoverBody2.remove();
		}
		var descText = boxEntry.shortDescription;
		var title = boxEntry.title;
		var descriptionBlurb = "<div id=\"hover-description-" + hoverAppId + "\" class=\"hover-description\">\r\n\t\t\t\t\t" + descText + "\r\n\t\t\t\t</div>";
		var headerImage = "<div id=\"hover-image-" + hoverAppId + "\" class=\"hover-image\">\r\n\t\t\t\t\t<img src=\"https://steamcdn-a.akamaihd.net/steam/apps/" + hoverAppId + "/header.jpg\" alt=\"" + title + "\" title=\"" + title + "\"/>\r\n\t\t\t\t</div>";
		var similarText = "";
		var similar = Render.similarBlurb(boxEntry.recommender);
		if(Main.focusedEntry == null || boxEntry.appid != Main.focusedEntry.appid) {
			var similarTitle = similar.title;
			var similarBlurb = similar.blurb;
			similarText = "<div id=\"hover-similar-title-" + hoverAppId + "\" class=\"hover-similar-title\">\r\n\t\t\t\t\t<p><strong>" + similarTitle + "</strong></p>\r\n\t\t\t\t\t<p>" + similarBlurb + "</p>\r\n\t\t\t\t</div>";
		}
		var hoverScreenshots = hoverAppNode.getElementsByClassName("hover_screenshots")[0];
		if(hoverScreenshots != null) {
			hoverScreenshots.insertAdjacentHTML("afterend",descriptionBlurb);
			hoverScreenshots.insertAdjacentHTML("afterend",similarText);
			hoverScreenshots.insertAdjacentHTML("afterend",headerImage);
			hoverScreenshots.innerHTML = "";
			hoverScreenshots.remove();
		}
		var hoverNode = window.document.getElementById("global_hover");
		Main.hoverObserver = new MutationObserver(Main.onMutateHoverNode);
		Main.hoverObserver.observe(hoverNode,{ attributes : false, childList : true, subtree : true});
	}
};
Main.onMutateSearchNode = function(mutationList,observer) {
	if(Main.searchTimer == null) {
		Main.searchTimer = new EggTimer(10,1,function() {
			Main.cleanupSearchNode();
			return true;
		},false);
	}
	Main.searchTimer.start();
};
Main.cleanupSearchNode = function() {
	var searchNode = window.document.getElementById("search_suggestion_contents");
	if(searchNode == null) {
		return;
	}
	var html = searchNode.innerHTML;
	var _g = 0;
	var _g1 = searchNode.children;
	while(_g < _g1.length) {
		var child = _g1[_g];
		++_g;
		if(js_Boot.__instanceof(child,HTMLAnchorElement)) {
			var a = child;
			var link = a.href;
			if(StrTool.isLink(link)) {
				var appid = StrTool.urlToAppid(link);
				a.href = "javascript:Main.focusFromSearch(" + appid + ")";
			}
		}
	}
};
Main.killHistory = function() {
	Main.lastMatchCount = 0;
	Main.breadcrumbs = [];
	Main.breadcrumbTitles = [];
	Main.breadcrumbBoxEntries = [];
	Main.refreshHistory = [];
	Main.renderBreadcrumbs();
	Main.renderBackRefreshButtons();
};
Main.hideHover = function() {
	GlobalStuff.bindHoverEvents("box-focused",-1,false);
	var globalHover = window.document.getElementById("global_hover");
	if(globalHover != null) {
		GlobalStuff.hardHide(globalHover);
	}
};
Main.onClickFocusSearch = $hx_exports["Main"]["onClickFocusSearch"] = function() {
	Main.focus("",null,function() {
		Main.renderBackRefreshButtons();
	});
	Main.hideHover();
};
Main.addToWishlist = $hx_exports["Main"]["addToWishlist"] = function(appid) {
	if(Main.tempWishlist != null) {
		if(Main.tempWishlist.indexOf(appid) == -1) {
			Main.tempWishlist.push(appid);
		}
	}
	var id = "wishlist-" + appid;
	var button = window.document.getElementById(id);
	Data.getLinkParam("game-add-to-wishlist-deepdive",function(linkParam) {
		if(linkParam != null) {
			AddToWishlistButton(button, appid, linkParam);
		}
	});
};
Main.allBlank = function(arr) {
	var result = true;
	var _g = 0;
	while(_g < arr.length) {
		var entry = arr[_g];
		++_g;
		if(entry != "" && entry != null) {
			result = false;
			break;
		}
	}
	return result;
};
Main.viewDetails = $hx_exports["Main"]["viewDetails"] = function(appid) {
};
Main.back = $hx_exports["Main"]["back"] = function() {
	if(Main.focusedEntry == null) {
		Main.clickBreadcrumb(Main.breadcrumbs.length - 1);
		return;
	}
	var currApp = Main.focusedEntry.appid;
	var theIndex = -1;
	Main.justClickedAppBack = true;
	if(Main.refreshHistory.length == 0) {
		var _g1 = 0;
		var _g = Main.breadcrumbs.length;
		while(_g1 < _g) {
			var i = _g1++;
			var j = Main.breadcrumbs.length - 1 - i;
			var backTo = Main.breadcrumbs[j];
			if(backTo != currApp) {
				theIndex = j;
				break;
			}
		}
		var allowBack = true;
		var clearInstead = false;
		if(theIndex < 0) {
			allowBack = false;
			if(currApp != null && currApp != "") {
				clearInstead = true;
			}
		}
		if(allowBack) {
			Main.clickBreadcrumb(theIndex);
			window.history.back();
		}
		if(clearInstead) {
			Main.onClickFocusSearch();
			window.history.back();
			if(Main.allBlank(Main.STARTER_APPS)) {
				Main.STARTER_APPS = [];
				Main.STARTER_BOXES = [];
			}
			if(Main.STARTER_BOXES.length == 0) {
				Main.getStarterApps(function(appids) {
					Main.getBoxEntriesFor(appids,["","","","","","","",""],function(entries) {
						Main.STARTER_BOXES = entries;
						Main.focus("",Main.STARTER_BOXES);
					});
				});
			} else {
				Main.focus("",Main.STARTER_BOXES);
			}
		}
	} else {
		var boxes = Main.refreshHistory.pop();
		Main.focus(Main.focusedEntry.appid,boxes);
	}
};
Main.refresh = $hx_exports["Main"]["refresh"] = function() {
	if(Main.focusedEntry == null) {
		Main.clickBreadcrumb(Main.breadcrumbs.length - 1);
		return;
	}
	var freezeBoxes = [];
	var _g1 = 0;
	var _g = Main.boxEntries.length;
	while(_g1 < _g) {
		var i = _g1++;
		freezeBoxes.push(Main.boxEntries[i].copy());
	}
	Main.refreshHistory.push(freezeBoxes);
	Main.sinkBoxes(false);
	Main.snipCurrentMatches();
	EggTimer.runOnce(250,function() {
		Main.handleMatches(Main.focusedEntry.appid,Main.currMatches);
		return true;
	});
};
Main.clickBreadcrumb = $hx_exports["Main"]["clickBreadcrumb"] = function(i) {
	Main.justClickedBreadcrumb = true;
	if(i == -1) {
		Main.killHistory();
		Main.focus("",Main.STARTER_BOXES.slice(),function() {
			Main.renderBreadcrumbs();
			Main.renderBackRefreshButtons();
		});
		return;
	}
	if(i >= Main.breadcrumbs.length) {
		return;
	}
	var appid = Main.breadcrumbs[i];
	var boxes = Main.breadcrumbBoxEntries[i];
	while(Main.breadcrumbs.length > i) {
		Main.breadcrumbs.pop();
		Main.breadcrumbTitles.pop();
		Main.breadcrumbBoxEntries.pop();
	}
	Main.hideHover();
	if(Main.focusedEntry != null) {
		Main.focusedEntry.clear();
	}
	Main.focus(appid,boxes,Main.renderBreadcrumbs);
};
Main.saveBreadcrumbs = function(appid,title,currBoxEntries) {
	if(appid == "") {
		return;
	}
	Main.breadcrumbs.push(appid);
	Main.breadcrumbTitles.push(title);
	var freezeBoxes = [];
	var _g1 = 0;
	var _g = Main.boxEntries.length;
	while(_g1 < _g) {
		var i = _g1++;
		freezeBoxes.push(currBoxEntries[i].copy());
	}
	Main.breadcrumbBoxEntries.push(freezeBoxes);
};
Main.saveHistory = function() {
	var state = Main.getCurrentHistoryPath();
	window.history.pushState(null,"",state);
};
Main.focusFromSearch = $hx_exports["Main"]["focusFromSearch"] = function(appid) {
	Main.killHistory();
	Main.focus(appid);
};
Main.focus = $hx_exports["Main"]["focus"] = function(appid,showTheseBoxes,callback) {
	var priorApp = "";
	var priorTitle = "";
	if(Main.focusedEntry != null) {
		priorApp = Main.focusedEntry.appid;
		priorTitle = Main.focusedEntry.title;
	}
	if(priorApp != appid) {
		Main.hideHover();
	}
	Main.focusedEntry = new BoxEntry();
	Main.focusedEntry.appid = appid;
	Main.focusedEntry.title = "App(" + appid + ")";
	Main.focusedEntry.setPrice(1999);
	if(showTheseBoxes == null || showTheseBoxes.length == 0) {
		Main.saveBreadcrumbs(priorApp,priorTitle,Main.boxEntries);
		Main.renderBreadcrumbs();
		if(priorApp != appid) {
			Main.refreshHistory = [];
		}
	} else {
		Main.lastMatchCount = -1;
	}
	Main.saveHistory();
	window.history.replaceState(null,"",Main.getCurrentHistoryPath());
	if(appid == "") {
		Main.focusedEntry = null;
		Main.renderFocusedBox();
		if(showTheseBoxes != null && showTheseBoxes.length > 0) {
			Main.displayBoxes(showTheseBoxes,callback);
		}
		return;
	}
	Data.getDetails(appid,function(details) {
		if(details != null) {
			Main.focusedEntry.setDetails(details);
			Main.renderFocusedBox();
			Main.sinkBoxes(false);
			if(showTheseBoxes == null || showTheseBoxes.length == 0) {
				Data.getMatches(appid,["rec1","rec2","rec3","rec4","rec5"],function(rawMatches) {
					rawMatches = Main.removeDuplicates(rawMatches);
					rawMatches = Main.removeByPreferences(rawMatches);
					Main.currMatches = rawMatches;
					if(Main.LOGGED_IN) {
						Data.getWishlist(function(list) {
							Main.wishlist = list;
							Main.tempWishlist = [];
							Main.handleMatches(appid,rawMatches,callback);
						});
					} else {
						Main.handleMatches(appid,rawMatches,callback);
					}
				});
			} else {
				Main.displayBoxes(showTheseBoxes,callback);
			}
		} else {
			console.log("ERROR: couldn't get AppDetails for (" + appid + ")");
		}
	});
};
Main.displayBoxes = function(showTheseBoxes,callback) {
	var _g1 = 0;
	var _g = showTheseBoxes.length;
	while(_g1 < _g) {
		var i = _g1++;
		var showBox = showTheseBoxes[i];
		if(showBox != null) {
			if(Main.boxEntries.length > i) {
				var theBox = Main.boxEntries[i];
				if(theBox != null) {
					theBox.copyValuesFrom(showBox);
				}
			}
		}
	}
	EggTimer.runOnce(100,function() {
		Main.updateBoxes();
		if(callback != null) {
			callback();
		}
		return true;
	});
};
Main.removeByPreferences = function(rawMatches) {
	if(rawMatches == null) {
		return rawMatches;
	}
	var key = rawMatches.keys();
	while(key.hasNext()) {
		var key1 = key.next();
		var appids = __map_reserved[key1] != null ? rawMatches.getReserved(key1) : rawMatches.h[key1];
		var kills = [];
		var _g = 0;
		while(_g < appids.length) {
			var appid = appids[_g];
			++_g;
			var appidint = Std.parseInt(appid);
			if(Main.prefs.owned_apps.indexOf(appidint) != -1 || Main.prefs.ignored.indexOf(appidint) != -1 || Main.prefs.played_elsewhere.indexOf(appidint) != -1) {
				kills.push(appid);
			}
		}
		var _g1 = 0;
		while(_g1 < kills.length) {
			var kill = kills[_g1];
			++_g1;
			HxOverrides.remove(appids,kill);
		}
		if(__map_reserved[key1] != null) {
			rawMatches.setReserved(key1,appids);
		} else {
			rawMatches.h[key1] = appids;
		}
	}
	return rawMatches;
};
Main.removeDuplicates = function(rawMatches) {
	var dupes = 0;
	if(rawMatches == null) {
		return rawMatches;
	}
	var key = rawMatches.keys();
	while(key.hasNext()) {
		var key1 = key.next();
		var appids = __map_reserved[key1] != null ? rawMatches.getReserved(key1) : rawMatches.h[key1];
		var otherkey = rawMatches.keys();
		while(otherkey.hasNext()) {
			var otherkey1 = otherkey.next();
			if(key1 == otherkey1) {
				continue;
			}
			var otherappids = __map_reserved[otherkey1] != null ? rawMatches.getReserved(otherkey1) : rawMatches.h[otherkey1];
			if(appids != null) {
				var _g1 = 0;
				var _g = appids.length;
				while(_g1 < _g) {
					var i = _g1++;
					var appid = appids[i];
					if(otherappids != null) {
						var _g3 = 0;
						var _g2 = otherappids.length;
						while(_g3 < _g2) {
							var j = _g3++;
							var jj = otherappids.length - j - 1;
							var otherappid = otherappids[jj];
							if(appid == otherappid) {
								otherappids.splice(jj,1);
								++dupes;
							}
						}
					}
				}
			}
		}
	}
	return rawMatches;
};
Main.snipCurrentMatches = function() {
	var snips = 0;
	var appids = [];
	var _g = 0;
	var _g1 = Main.boxEntries;
	while(_g < _g1.length) {
		var entry = _g1[_g];
		++_g;
		appids.push(entry.appid);
	}
	var key = Main.currMatches.keys();
	while(key.hasNext()) {
		var key1 = key.next();
		var _this = Main.currMatches;
		var matches = __map_reserved[key1] != null ? _this.getReserved(key1) : _this.h[key1];
		var _g2 = 0;
		while(_g2 < appids.length) {
			var appid = appids[_g2];
			++_g2;
			var _g21 = 0;
			var _g11 = matches.length;
			while(_g21 < _g11) {
				var j = _g21++;
				var jj = matches.length - j - 1;
				var matchAppid = matches[jj];
				if(matchAppid == appid) {
					matches.splice(jj,1);
					++snips;
				}
			}
		}
	}
};
Main.handleMatches = function(appid,rawMatches,callback) {
	if(rawMatches == null) {
		console.log("ERROR: couldn't get matches for (" + appid + ")");
	} else {
		var recs = Main.narrowMatches(rawMatches,Main.getPreviousAppIds());
		var count = 0;
		if(recs != null) {
			Main.lastMatchCount = recs.appids.length;
		}
		if(recs == null || recs.appids == null || recs.appids.length == 0) {
			console.log("ERROR: couldn't narrow matches for (" + appid + ") rawMatches = " + rawMatches.toString());
		} else {
			Data.getDetailsMulti(recs.appids,function(details) {
				if(details == null) {
					console.log("ERROR: couldn't get details for (" + Std.string(recs.appids) + ")");
				} else {
					var i = 0;
					var _g = 0;
					while(_g < details.length) {
						var detail = details[_g];
						++_g;
						if(i >= 9) {
							break;
						}
						var appid1 = detail.appid;
						if(detail != null) {
							var arrIndex = -1;
							var _g2 = 0;
							var _g1 = recs.appids.length;
							while(_g2 < _g1) {
								var j = _g2++;
								var otherappid = recs.appids[j];
								if(appid1 == otherappid) {
									arrIndex = j;
									break;
								}
							}
							Main.boxEntries[i].appid = appid1;
							Main.setBoxDetails(Main.boxEntries[i],detail,Main.focusedEntry);
							Main.boxEntries[i].recommender = arrIndex != -1 ? recs.recommenders[arrIndex] : "";
							++i;
						}
					}
					Main.updateBoxes();
					if(callback != null) {
						callback();
					}
				}
			});
		}
	}
};
Main.setBoxDetails = function(boxEntry,detail,focusedEntry) {
	boxEntry.setDetails(detail);
	if(focusedEntry != null) {
		boxEntry.makeTagEntries(focusedEntry.tags);
	} else {
		boxEntry.makeTagEntries([]);
	}
};
Main.updateBoxes = function() {
	var _g = 0;
	var _g1 = Main.boxEntries;
	while(_g < _g1.length) {
		var entry = _g1[_g];
		++_g;
		var _g2 = 0;
		var _g3 = Main.breadcrumbBoxEntries;
		while(_g2 < _g3.length) {
			var bcEntries = _g3[_g2];
			++_g2;
			var _g4 = 0;
			while(_g4 < bcEntries.length) {
				var bcEntry = bcEntries[_g4];
				++_g4;
				if(bcEntry.appid == entry.appid) {
					entry.title = entry.title;
				}
			}
		}
		if(entry.tags != null) {
			if(Main.focusedEntry != null && Main.focusedEntry.tags != null) {
				var comparison = Main.tagDB.compare(Main.focusedEntry.tags,entry.tags);
				var results = Main.tagDB.normalizeMatches(comparison.matches);
				entry.tagCategories = results;
			} else {
				var comparison1 = Main.tagDB.compare(entry.tags,entry.tags);
				var results1 = Main.tagDB.normalizeMatches(comparison1.matches);
				entry.tagCategories = results1;
			}
		}
	}
	if(Main.focusedEntry != null && Main.focusedEntry.tags != null) {
		var comparison2 = Main.tagDB.compare(Main.focusedEntry.tags,Main.focusedEntry.tags);
		var results2 = Main.tagDB.normalizeMatches(comparison2.matches);
		Main.focusedEntry.tagCategories = results2;
		Main.focusedEntry.makeTagEntries(Main.focusedEntry.tags);
	}
	if(Main.gridObserver != null) {
		Main.gridObserver.disconnect();
	}
	Main.gridObserver = new MutationObserver(function(arr,observer) {
		observer.disconnect();
		EggTimer.runOnce(1,function() {
			Main.sinkBoxes(true);
			return true;
		});
	});
	var gridRoot = window.document.getElementById("grid");
	Main.gridObserver.observe(gridRoot,{ attributes : true, childList : true, subtree : true});
	Main.renderBoxes(true);
	Main.updateBoxesHover();
	Main.renderBackRefreshButtons();
};
Main.updateBoxesHover = function() {
	var _g = 0;
	while(_g < 9) {
		var i = _g++;
		var appIdInt = Std.parseInt(Main.boxEntries[i].appid);
		var params_top_area_content = "";
		var boxButtons = [window.document.getElementById("box-buttons-" + i)];
		var boxMicrotrailer = [window.document.getElementById("box-microtrailer-" + i)];
		var boxImage = [window.document.getElementById("box-image-" + i)];
		var boxPrompt = [window.document.getElementById("box-prompt-" + i)];
		var boxTags = [window.document.getElementById("box-tags-" + i)];
		GlobalStuff.show(boxButtons[0],false);
		GlobalStuff.show(boxMicrotrailer[0],false);
		var onMouseEnter = (function(boxTags1,boxPrompt1,boxImage1,boxMicrotrailer1,boxButtons1) {
			return function() {
				GlobalStuff.show(boxButtons1[0],true);
				GlobalStuff.show(boxMicrotrailer1[0],true);
				GlobalStuff.show(boxPrompt1[0],true);
				GlobalStuff.show(boxTags1[0],true);
				GlobalStuff.show(boxImage1[0],false);
			};
		})(boxTags,boxPrompt,boxImage,boxMicrotrailer,boxButtons);
		var onMouseLeave = (function(boxTags2,boxPrompt2,boxImage2,boxMicrotrailer2,boxButtons2) {
			return function() {
				GlobalStuff.show(boxButtons2[0],false);
				GlobalStuff.show(boxMicrotrailer2[0],false);
				GlobalStuff.show(boxPrompt2[0],false);
				GlobalStuff.show(boxTags2[0],false);
				GlobalStuff.show(boxImage2[0],true);
			};
		})(boxTags,boxPrompt,boxImage,boxMicrotrailer,boxButtons);
		GlobalStuff.bindHoverEvents("box-" + i,appIdInt,true,onMouseEnter,onMouseLeave);
	}
	if(Main.focusedEntry != null && Main.focusedEntry.appid != "") {
		var appIdInt1 = Std.parseInt(Main.focusedEntry.appid);
		var focusBoxMicrotrailer = window.document.getElementById("focus-box-microtrailer");
		var focusBoxBigScreenshot = window.document.getElementById("focus-box-big-screenshot");
		var onMouseEnterFocus = function() {
			GlobalStuff.show(focusBoxMicrotrailer,true);
			GlobalStuff.show(focusBoxBigScreenshot,false);
		};
		var onMouseLeaveFocus = function() {
			GlobalStuff.show(focusBoxMicrotrailer,false);
			GlobalStuff.show(focusBoxBigScreenshot,true);
		};
		GlobalStuff.bindHoverEvents("box-focused",appIdInt1,true,onMouseEnterFocus,onMouseLeaveFocus);
	}
};
Main.narrowMatches = function(rawMatches,previousAppIds) {
	var matchTypes = [];
	var recommender = rawMatches.keys();
	while(recommender.hasNext()) {
		var recommender1 = recommender.next();
		var matchList = __map_reserved[recommender1] != null ? rawMatches.getReserved(recommender1) : rawMatches.h[recommender1];
		var _g1 = 0;
		var _g = previousAppIds.length;
		while(_g1 < _g) {
			var i = _g1++;
			var appid = previousAppIds[i];
			var _g3 = 0;
			var _g2 = matchList.length;
			while(_g3 < _g2) {
				var j = _g3++;
				var other = matchList[j];
				if(other == appid) {
					matchList.splice(j,1);
					break;
				}
			}
		}
		var count = matchList.length;
		if(count > 0) {
			matchTypes.push(recommender1);
		}
	}
	var failsafe = 100;
	var target = 9;
	var matches = { appids : [], recommenders : []};
	var sorter = [];
	var matchQuota = [{ name : "rec1", value : 3, count : 0},{ name : "rec2", value : 3, count : 0},{ name : "rec3", value : 3, count : 0}];
	var failsafe1 = 100;
	while(target > 0 && failsafe1 > 0) {
		var _g4 = 0;
		while(_g4 < matchQuota.length) {
			var quota = matchQuota[_g4];
			++_g4;
			var recommender2 = quota.name;
			var value = quota.value;
			var _g21 = 0;
			var _g11 = value;
			while(_g21 < _g11) {
				var j1 = _g21++;
				var matchList1 = __map_reserved[recommender2] != null ? rawMatches.getReserved(recommender2) : rawMatches.h[recommender2];
				var appid1 = matchList1[quota.count];
				sorter.push({ appid : appid1, recommender : recommender2});
				quota.count++;
				--target;
			}
			quota.value = 1;
		}
		--failsafe1;
	}
	sorter.sort(function(a,b) {
		if(a.recommender < b.recommender) {
			return -1;
		}
		if(a.recommender > b.recommender) {
			return 1;
		}
		return 0;
	});
	var _g5 = 0;
	while(_g5 < sorter.length) {
		var sortbit = sorter[_g5];
		++_g5;
		matches.appids.push(sortbit.appid);
		matches.recommenders.push(sortbit.recommender);
	}
	return matches;
};
Main.clear = function() {
	Main.domRoot.innerHTML = "<main class=\"diving-bell-content\"></main>";
};
Math.__name__ = true;
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		return null;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
var Render = function() { };
Render.__name__ = true;
Render.breadcrumbs = function(appids,titles) {
	var html = "<section class=\"breadcrumbs\" id=\"breadcrumbs\">\n" + Render.breadcrumbsContent(appids) + "\n" + "</section>";
	return html;
};
Render.breadcrumbsContent = function(appids,titles) {
	var blurb = "";
	var crumbs = "";
	var diveMapTitle = Main.loc("#labs_deepdive_divemaptitle");
	var diveMapBlurb = Main.loc("#labs_deepdive_divemapblurb");
	diveMapBlurb = StringTools.replace(diveMapBlurb,"%s","href=\"/store/account/preferences\" target=\"_blank\"");
	var hr = "";
	if(appids == null || appids.length < 1) {
		blurb = Main.loc("#labs_deepdive_divemapcaption");
		hr = "<hr>";
	} else {
		blurb = "";
		var startOver = Main.loc("#labs_deepdive_startover");
		var url = Main.cdnURL + "labs/diving_bell/startover.svg";
		crumbs += "\n\r\n\t\t\t\t<a href=\"divingbell\">\r\n\t\t\t\t\t<div class=\"breadcrumb-startover-container\">\r\n\t\t\t\t\t\t<img src=\"" + url + "\" alt=\"" + startOver + "\" title=\"" + startOver + "\" class=\"breadcrumb\"/>\r\n\t\t\t\t\t\t<div class=\"breadcrumb-startover-text\">" + startOver + "</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</a>";
	}
	if(appids != null) {
		var start = 0;
		var overflow = appids.length - 6;
		if(overflow > 0) {
			start = overflow;
		}
		var _g1 = 0;
		var _g = appids.length;
		while(_g1 < _g) {
			var i = _g1++;
			var j = start + i;
			if(j >= appids.length) {
				break;
			}
			var appid = appids[j];
			var title = titles[j];
			if(appid != "" && appid != null) {
				var url1 = "https://steamcdn-a.akamaihd.net/steam/apps/" + appid + "/header.jpg";
				var urlArrow = Main.cdnURL + "labs/diving_bell/arrow.png";
				if(crumbs != "") {
					crumbs += "<img src=\"" + urlArrow + "\" class=\"arrow\">";
				}
				crumbs += "\n<a href=\"javascript:Main.clickBreadcrumb(" + j + ")\"><img src=\"" + url1 + "\" alt=\"" + title + "\" title=\"" + title + "\" class=\"breadcrumb\"/></a>";
			}
		}
	}
	var html = "" + hr + "<p>" + blurb + "</p>\r\n\t\t\t<div class=\"note-preferences\">\r\n\t\t\t\t<p><strong>" + diveMapTitle + "</strong>&nbsp;&nbsp;&nbsp;" + diveMapBlurb + "</p>\r\n\t\t\t</div>\r\n\t\t\t<div class=\"breadcrumbbox\">" + crumbs + "</div>";
	return html;
};
Render.header = function() {
	var html = "<br/>\r\n\t\t<h1 > Discover your next favorite game </ h1 >\r\n\t\t";
	return html;
};
Render.sinkBox = function(index,show) {
	var box = window.document.getElementById(Std.string("box-wrapper-" + index));
	var doodads = window.document.getElementById(Std.string("box-doodads-" + index));
	if(!show) {
		if(!box.classList.contains("sink")) {
			box.classList.add("sink");
		}
		GlobalStuff.show(doodads,true);
		EggTimer.runOnce(250,function() {
			GlobalStuff.show(doodads,false);
			return true;
		});
	} else {
		if(box.classList.contains("sink")) {
			box.classList.remove("sink");
		}
		GlobalStuff.show(doodads,false);
		EggTimer.runOnce(250,function() {
			GlobalStuff.show(doodads,true);
			return true;
		});
	}
};
Render.microtrailer = function(index,entry,className,id,containerClass) {
	if(containerClass == null) {
		containerClass = "";
	}
	if(id == null) {
		id = "";
	}
	if(className == null) {
		className = "microtrailer";
	}
	var boxMicrotrailerId = id == "" ? "box-microtrailer-" + index : id;
	if(containerClass == "") {
		containerClass = "box-microtrailer hide-fancy";
	}
	var appid = entry.appid;
	var title = entry.title;
	var webm = entry.microtrailer_webm;
	var mpeg4 = entry.microtrailer_mpeg4;
	var webm_full = entry.trailer_webm;
	var mpeg4_full = entry.trailer_mpeg4;
	var screenshot = entry.screenshot;
	var html = "<div class=\"" + containerClass + "\" id=\"" + boxMicrotrailerId + "\" style=\"background-image:url(" + screenshot + "); background-repeat:no-repeat; background-size:100% 100%\">\r\n\t\t\t<video class=\"" + className + "\" loop preload muted autoplay alt=\"" + title + "\">\r\n\t\t\t\t<source src=\"" + webm + "\">\r\n\t\t\t\t<source src=\"" + mpeg4 + "\">\r\n\t\t\t\t<source src=\"" + webm_full + "\">\r\n\t\t\t\t<source src=\"" + mpeg4_full + "\">\r\n\t\t\t</video>\r\n\t\t</div>";
	return html;
};
Render.focusBox = function(entry) {
	if(entry == null || entry.appid == "") {
		return Render.searchBox();
	}
	var html = "<div class=\"box focused\" id=\"box-focused\">\n" + Render.focusBoxContent(entry);
	return html;
};
Render.focusBoxContent = function(entry,enableBack,enableRefresh) {
	if(enableRefresh == null) {
		enableRefresh = true;
	}
	if(enableBack == null) {
		enableBack = true;
	}
	var searchSvg = Main.cdnURL + "/labs/diving_bell/search.svg";
	var boxButtonsId = "box-buttons-focus";
	var index = 10;
	var extra = "";
	var doodadId = "box-doodads-" + index;
	var wrapperId = "box-wrapper-" + index;
	var wrapperClass = "box-wrapper" + extra;
	var boxButtonsId1 = "box-buttons-" + index;
	var boxImageId = "box-image-" + index;
	var boxTagsId = "box-tags-" + index;
	var boxPromptId = "box-prompt-" + index;
	var appid = entry.appid;
	var title = entry.title;
	var discountBlock = entry.discountBlock;
	if(entry.comingSoon) {
		discountBlock = "<div class=\"discount_block discount_block_inline no_discount\" data-price-final=\"\">\r\n\t\t\t\t\t<div class=\"discount_prices\">\r\n\t\t\t\t\t\t<div class=\"discount_final_price\">Coming Soon</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>";
	}
	if(entry.tagCategories.length == 0) {
		var comparison = Main.tagDB.compare(entry.tags,entry.tags);
		var results = Main.tagDB.normalizeMatches(comparison.matches);
		entry.tagCategories = results;
	}
	entry.makeTagEntries(entry.tags);
	var tagHTML = entry.getTagHTML2(6);
	var screenShots = "";
	screenShots += "<div class=\"box-images-big\">";
	var screenshot = entry.screenshots[0];
	screenShots += "<img class=\"focus-box-big-screenshot\" id=\"focus-box-big-screenshot\" src=\"" + screenshot + "\"/>";
	screenShots += Render.microtrailer(index,entry,"focus-box-microtrailer-video","focus-box-microtrailer","focus-box-microtrailer hide-fancy");
	screenShots += "</div>";
	screenShots += "<div class=\"box-images-small\">";
	var _g = 1;
	while(_g < 5) {
		var i = _g++;
		var screenshot1 = entry.screenshots[i];
		screenShots += "<img src=\"" + screenshot1 + "\"/>";
	}
	screenShots += "</div>";
	var details = Main.loc("#labs_deepdive_store_page_button");
	var keyAttributes = Main.loc("#labs_deepdive_keytags");
	var selectToExplore = Main.loc("#labs_deepdive_selecttoexplore");
	var gamesLike = Main.loc("#labs_deepdive_gameslike");
	var onWishlist = Main.LOGGED_IN && Main.onWishlist(appid);
	var isOwned = Main.LOGGED_IN && Main.isOwned(appid);
	var wishlistBtn = Render.wishlistButton(appid,onWishlist,isOwned);
	var html = "<div class=\"" + wrapperClass + "\" id=\"" + wrapperId + "\">\r\n\t\t\t\t\r\n\t\t\t\t<div class=\"box-prompt hide-fancy\" id=\"" + boxPromptId + "\">\r\n\t\t\t\t\t<p>" + selectToExplore + "</p>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"games-like\">" + gamesLike + "</div>\r\n\t\t\t\t\t<div id=\"search-wrapper\">\r\n\t\t\t\t\t\t<div class=\"search-container\" id=\"search-container\">\r\n\t\t\t\t\t\t\t<a href=\"javascript:Main.onClickFocusSearch();\">\r\n\t\t\t\t\t\t\t\t<h2>" + title + "</h2>\r\n\t\t\t\t\t\t\t\t<img src=\"" + searchSvg + "\" class=\"search-icon\"/>\r\n\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<hr>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"box-doodads\" id=\"" + doodadId + "\">" + discountBlock + "</div>\r\n\t\t\t\t<div class=\"box-buttons\" id=\"" + boxButtonsId1 + "\">\r\n\t\t\t\t\t" + wishlistBtn + "\r\n\t\t\t\t\t<a href=\"https://store.steampowered.com/app/" + appid + "\" target=\"_blank\" class=\"btn_blue_steamui btn_small_tall btn-details\"><span>" + details + "</span></a>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"box-tags-focus hide-fancy\" id=\"" + boxTagsId + "\">\r\n\t\t\t\t\t<em>" + keyAttributes + "</em><br/>\r\n\t\t\t\t\t" + tagHTML + "\r\n\t\t\t\t</div>\r\n\t\t\t\t" + screenShots + "\r\n\t\t\t</div>";
	return html;
};
Render.box = function(index,entry,sink,first) {
	if(first == null) {
		first = false;
	}
	if(sink == null) {
		sink = false;
	}
	var boxId = "box-" + index;
	var extra = "";
	if(sink) {
		extra += " sink";
	}
	var extraClass = "";
	if(entry == null || entry.appid == null || entry.appid == "") {
		extraClass = "empty-result";
	}
	var html = "<div class=\"box\" id=\"" + boxId + "\">\n" + Render.boxContent(index,entry,sink,first) + "\n" + "</div>";
	return html;
};
Render.similarBlurb = function(recommender) {
	var recTitle = "";
	var recBlurb = "";
	switch(recommender) {
	case "rec1":
		recTitle = Main.loc("#labs_deepdive_directmatch");
		recBlurb = Main.loc("#labs_deepdive_directmatch_blurb");
		break;
	case "rec2":
		recTitle = Main.loc("#labs_deepdive_indirectmatch");
		recBlurb = Main.loc("#labs_deepdive_indirectmatch_blurb");
		break;
	case "rec3":
		recTitle = Main.loc("#labs_deepdive_similargem");
		recBlurb = Main.loc("#labs_deepdive_similargem_blurb");
		break;
	}
	return { title : recTitle, blurb : recBlurb};
};
Render.boxContent = function(index,entry,sink,first) {
	if(first == null) {
		first = false;
	}
	if(sink == null) {
		sink = false;
	}
	if(entry == null) {
		return "";
	}
	var extra = "";
	if(sink) {
		extra += " sink";
	}
	var doodadId = "box-doodads-" + index;
	var wrapperId = "box-wrapper-" + index;
	var wrapperClass = "box-wrapper" + extra;
	var boxButtonsId = "box-buttons-" + index;
	var boxImageId = "box-image-" + index;
	var boxMicrotrailerId = "box-microtrailer-" + index;
	var boxTagsId = "box-tags-" + index;
	var boxPromptId = "box-prompt-" + index;
	var recommender = entry.recommender;
	var recTitle = "";
	var recBlurb = "";
	var recText = Render.similarBlurb(recommender);
	recTitle = recText.title;
	recBlurb = recText.blurb;
	var appid = entry.appid;
	var title = entry.title;
	var url = entry.url;
	var webm = entry.microtrailer_webm;
	var mpeg4 = entry.microtrailer_mpeg4;
	var discountBlock = entry.discountBlock;
	if(entry.comingSoon) {
		discountBlock = "<div class=\"discount_block discount_block_inline no_discount\" data-price-final=\"\">\r\n\t\t\t\t\t<div class=\"discount_prices\">\r\n\t\t\t\t\t\t<div class=\"discount_final_price\">Coming Soon</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>";
	}
	var tagHTML = entry.getTagHTML();
	var details = Main.loc("#labs_deepdive_store_page_button");
	var keyThings = first ? Main.loc("#labs_deepdive_keytags") : Main.loc("#labs_deepdive_keysimilarities");
	var selectToExplore = Main.loc("#labs_deepdive_selecttoexplore");
	var onWishlist = Main.LOGGED_IN && Main.onWishlist(appid);
	var isOwned = Main.LOGGED_IN && Main.isOwned(appid);
	var wishlistBtn = Render.wishlistButton(appid,onWishlist,isOwned);
	var html = "<div class=\"" + wrapperClass + "\" id=\"" + wrapperId + "\">\r\n\t\t\t\t<a class=\"box-link\" href=\"javascript:Main.focus(" + appid + ")\"></a>\r\n\t\t\t\t<div class=\"box-image\" id=\"" + boxImageId + "\">\r\n\t\t\t\t\t<img src=\"https://steamcdn-a.akamaihd.net/steam/apps/" + appid + "/header.jpg\" alt=\"" + title + "\" title=\"" + title + "\"/>\r\n\t\t\t\t</div>\n" + Render.microtrailer(index,entry,"microtrailer") + "\n" + ("<div class=\"box-prompt hide-fancy\" id=\"" + boxPromptId + "\">\r\n\t\t\t\t\t<p>" + selectToExplore + "</p>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"box-doodads\" id=\"" + doodadId + "\">") + discountBlock + ("</div>\r\n\t\t\t\t<div class=\"title\" id=\"box-title\" title='" + recBlurb + "'>\r\n\t\t\t\t\t" + recTitle + "\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"box-buttons\" id=\"" + boxButtonsId + "\">\r\n\t\t\t\t\t" + wishlistBtn + "\r\n\t\t\t\t\t<a href=\"" + url + "\" target=\"_blank\" class=\"btn_blue_steamui btn_small_tall btn-details\"><span>" + details + "</span></a>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"box-tags hide-fancy\" id=\"" + boxTagsId + "\">\r\n\t\t\t\t\t<em>" + keyThings + "</em><br>\r\n\t\t\t\t\t" + tagHTML + "\r\n\t\t\t\t</div>\r\n\t\t\t</div>");
	return html;
};
Render.wishlistButton = function(appid,onWishlist,isOwned) {
	if(isOwned == null) {
		isOwned = false;
	}
	if(onWishlist == null) {
		onWishlist = false;
	}
	var id = "wishlist-" + appid;
	if(isOwned) {
		var wishlist = Main.loc("#labs_deepdive_inlibrary");
		var cdn = Main.cdnURL;
		return "<a id=\"" + id + "\" href=\"#\" class=\"btn_blue_steamui btn_small_tall btn_disabled btn-wishlist\">\r\n\t\t\t\t<span>\r\n\t\t\t\t<img src=\"https://steamstore-a.akamaihd.net/public/images/v6/ico/ico_selected.png\" border=\"0\">\r\n\t\t\t\t" + wishlist + "\r\n\t\t\t\t</span>\r\n\t\t\t</a>";
	}
	if(!onWishlist) {
		var wishlist1 = Main.loc("#btn_add_to_wishlist");
		return "<a id=\"" + id + "\" href=\"javascript:Main.addToWishlist(" + appid + ")\" class=\"btn_blue_steamui btn_small_tall btn-wishlist\">\r\n\t\t\t\t<span>\r\n\t\t\t\t<img src=\"https://steamstore-a.akamaihd.net/public/images/v6/ico/ico_selected.png\" border=\"0\">\r\n\t\t\t\t" + wishlist1 + "\r\n\t\t\t\t</span>\r\n\t\t\t</a>";
	} else {
		var wishlist2 = Main.loc("#labs_deepdive_onwishlist");
		var cdn1 = Main.cdnURL;
		return "<a id=\"" + id + "\" href=\"#\" class=\"btn_blue_steamui btn_small_tall btn_disabled btn-wishlist\">\r\n\t\t\t\t<span>\r\n\t\t\t\t<img src=\"https://steamstore-a.akamaihd.net/public/images/v6/ico/ico_selected.png\" border=\"0\">\r\n\t\t\t\t" + wishlist2 + "\r\n\t\t\t\t</span>\r\n\t\t\t</a>";
	}
};
Render.searchBox = function() {
	var html = "<div class=\"box focused\" id=\"box-focused\">" + Render.searchBoxContent() + "\n" + "</div>";
	return html;
};
Render.searchBoxContent = function() {
	var backgroundUrl = Main.cdnURL + "/labs/diving_bell/gridbackground.png";
	var gamesLike = Main.loc("#labs_deepdive_gameslike");
	var searchBlurb = Main.loc("#labs_deepdive_searchblurb");
	var search = Main.loc("#labs_deepdive_search");
	var searchSvg = Main.cdnURL + "/labs/diving_bell/search.svg";
	return "<div class=\"box-shadow\"></div>\r\n\t\t\t<div class=\"box-background\" style=\"background-image: url(" + backgroundUrl + ");\"></div>\r\n\t\t\t<div class=\"box-content\">\r\n\t\t\t\t<div class=\"games-like\">" + gamesLike + "</div>\r\n\t\t\t\t<br/>\r\n\t\t\t\t<br/>\r\n\t\t\t\t<input id=\"search-name\" type=\"text\" class=\"text-search-big\" placeholder=\"" + search + "\" autocomplete=\"off\" autofocus/>\r\n\t\t\t\t<img src=\"" + searchSvg + "\" class=\"search-icon\"/>\r\n\t\t\t\t<hr>\r\n\t\t\t\t<p class=\"text-search-small\">" + searchBlurb + "</p>\r\n\t\t\t\t<div class=\"search-wrapper\">\r\n\t\t\t\t\t<div id=\"searchterm_options\" class=\"search_suggest popup_block_new\" style=\"display: none;\">\r\n\t\t\t\t\t<div class=\"popup_body\" style=\"border-top: none;\">\r\n\t\t\t\t\t\t<div id=\"search_suggestion_contents\">\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>";
};
Render.injectSearchContent = function(text) {
	return "<input id=\"search-name\" type=\"text\" class=\"text-search-big\" placeholder=\"" + text + "\" autocomplete=\"off\"/>\r\n\t\t<hr>\r\n\t\t<div id=\"searchterm_options\" class=\"search_suggest popup_block_new\" style=\"display: none;\">\r\n\t\t<div class=\"popup_body\" style=\"border-top: none;\">\r\n\t\t\t<div id=\"search_suggestion_contents\">\r\n\t\t\t</div>\r\n\t\t</div>";
};
Render.injectFocusContent = function(title) {
	var searchSvg = Main.cdnURL + "/labs/diving_bell/search.svg";
	return "<div class=\"search-container\" id=\"search-container\">\r\n\t\t\t<h2 id=\"focus-title\">" + title + "</h2>\r\n\t\t\t<img src=\"" + searchSvg + "\" class=\"search-icon\"/>;\r\n\t\t</div>";
};
Render.backRefreshButtons = function(enableBack,enableRefresh) {
	if(enableRefresh == null) {
		enableRefresh = true;
	}
	if(enableBack == null) {
		enableBack = true;
	}
	return Render.backRefreshButtonsContent(enableBack,enableRefresh) + "\n";
};
Render.backRefreshButtonsContent = function(enableBack,enableRefresh) {
	if(enableRefresh == null) {
		enableRefresh = true;
	}
	if(enableBack == null) {
		enableBack = true;
	}
	var backSvg = Main.cdnURL + "/labs/diving_bell/back.svg";
	var refreshSvg = Main.cdnURL + "/labs/diving_bell/refresh.svg";
	var refresh = Main.loc("#labs_deepdive_refresh");
	var back = Main.loc("#labs_deepdive_back");
	return "<div class='nav-button-wrapper'>" + ((enableBack ? "<button id=\"button-back\" class=\"button-back button-round\" onclick=\"Main.back()\">\r\n\t\t\t\t\t<p>" + back + "</p>\r\n\t\t\t\t\t<img src=\"" + backSvg + "\">\r\n\t\t\t\t </button>\n" : "<button id=\"button-back\" class=\"button-back button-round disabled\" onclick=\"\">\r\n\t\t\t\t\t<p>" + back + "</p>\r\n\t\t\t\t\t<img src=\"" + backSvg + "\">\r\n\t\t\t\t </button>\n") + (enableRefresh ? "<button id=\"button-refresh\" class=\"button-refresh button-round\" onclick=\"Main.refresh()\">\r\n\t\t\t\t\t<p>" + refresh + "</p>\r\n\t\t\t\t\t<img src=\"" + refreshSvg + "\">\r\n\t\t\t\t </button>\n" : "<button id=\"button-refresh\" class=\"button-refresh button-round disabled\" onclick=\"\">\r\n\t\t\t\t\t<p>" + refresh + "</p>\r\n\t\t\t\t\t<img src=\"" + refreshSvg + "\">\r\n\t\t\t\t </button>\n")) + "</div>";
};
Render.grid = function(recommendations,focus,sink,first) {
	if(first == null) {
		first = false;
	}
	if(sink == null) {
		sink = false;
	}
	var html = "";
	var b = 0;
	html += Render.backRefreshButtons();
	html += "<section class=\"side-panel\" id=\"side-panel\">\n";
	if(focus != null) {
		html += Render.focusBox(focus) + "\n";
	} else {
		html += Render.searchBox() + "\n";
	}
	html += "</section>\n";
	html += "<section class=\"grid-container\" id=\"grid\">";
	var _g = 0;
	while(_g < 3) {
		var i = _g++;
		html += "<section class=\"box-container\">";
		var j = 0;
		var _g1 = 0;
		while(_g1 < 3) {
			var j1 = _g1++;
			var entry = recommendations[b];
			html += Render.box(b,entry,sink,first);
			++b;
		}
		html += "</section>";
	}
	html += "<section>";
	return html;
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StrTool = function() { };
StrTool.__name__ = true;
StrTool.fu = function(str) {
	var first = str.charAt(0);
	var rest = HxOverrides.substr(str,1,str.length - 1);
	return first.toUpperCase() + rest;
};
StrTool.urlToAppid = function(str) {
	if(str.indexOf("https://") == 0) {
		var arr = str.split("/");
		var _g = 0;
		while(_g < arr.length) {
			var bit = arr[_g];
			++_g;
			var num = Std.parseInt(bit);
			if(num != null) {
				if(num == null) {
					return "null";
				} else {
					return "" + num;
				}
			}
		}
	}
	return "";
};
StrTool.isLink = function(str) {
	if(str.indexOf("https://") == 0) {
		return true;
	}
	if(str.indexOf("http://") == 0) {
		return true;
	}
	return false;
};
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
var TagDB = function(map) {
	this.allCategories = [];
	this.allTags = [];
	this.id2Cat = map;
	this.cat2Id = new haxe_ds_StringMap();
	var id = map.keys();
	while(id.hasNext()) {
		var id1 = id.next();
		var cats = __map_reserved[id1] != null ? map.getReserved(id1) : map.h[id1];
		var _g = 0;
		while(_g < cats.length) {
			var cat = cats[_g];
			++_g;
			this._addIdToCat(id1,cat,this.cat2Id);
			if(this.allCategories.indexOf(cat) == -1) {
				this.allCategories.push(cat);
			}
		}
		if(this.allTags.indexOf(id1) == -1) {
			this.allTags.push(id1);
		}
	}
};
TagDB.__name__ = true;
TagDB.prototype = {
	copyTagMatch: function(tm) {
		var tm2 = { category : tm.category, tags : tm.tags != null ? tm.tags.slice() : null, weight : tm.weight, focusCount : tm.focusCount, otherCount : tm.otherCount};
		return tm2;
	}
	,copyTagMatchArr: function(arr) {
		var results = [];
		var _g = 0;
		while(_g < arr.length) {
			var tm = arr[_g];
			++_g;
			var tm2 = this.copyTagMatch(tm);
			results.push(tm2);
		}
		return results;
	}
	,normalizeMatches: function(matches) {
		var results = [];
		var focusTotal = 0.0;
		var otherTotal = 0.0;
		var _g = 0;
		while(_g < matches.length) {
			var match = matches[_g];
			++_g;
			focusTotal += match.focusCount;
			otherTotal += match.otherCount;
		}
		var hasSex = false;
		var hasViolence = false;
		var _g1 = 0;
		while(_g1 < matches.length) {
			var match1 = matches[_g1];
			++_g1;
			match1.focusCount /= focusTotal;
			match1.otherCount /= otherTotal;
			var score = (match1.focusCount - Math.abs(match1.focusCount - match1.otherCount)) * match1.weight;
			results.push({ category : match1.category, score : score, tags : match1.tags.slice()});
			if(match1.category == "sex") {
				hasSex = true;
			}
			if(match1.category == "violence") {
				hasViolence = true;
			}
		}
		if(hasSex || hasViolence) {
			var _g11 = 0;
			var _g2 = results.length;
			while(_g11 < _g2) {
				var i = _g11++;
				var j = results.length - i - 1;
				var result = results[j];
				if(result != null && result.category == "warning") {
					results.splice(j,1);
				}
			}
		}
		var _g12 = 0;
		var _g3 = results.length;
		while(_g12 < _g3) {
			var i1 = _g12++;
			var result1 = results[i1];
			var _g31 = 0;
			var _g21 = results.length;
			while(_g31 < _g21) {
				var j1 = _g31++;
				if(i1 == j1) {
					continue;
				}
				var other = results[j1];
				var _g4 = 0;
				var _g5 = result1.tags;
				while(_g4 < _g5.length) {
					var tag = _g5[_g4];
					++_g4;
					if(other.tags.indexOf(tag) != -1) {
						HxOverrides.remove(other.tags,tag);
						if(other.tags.length == 0) {
							other.score = 0.0;
						}
					}
				}
			}
			if(result1.tags.length == 0) {
				result1.score = 0.0;
			}
		}
		results.sort(function(a,b) {
			if(a.score > b.score) {
				return -1;
			}
			if(a.score < b.score) {
				return 1;
			}
			return 0;
		});
		return results;
	}
	,trimSynonyms: function(arr) {
		var kills = [];
		var _g1 = 0;
		var _g = arr.length;
		while(_g1 < _g) {
			var i = _g1++;
			var tag = arr[i];
			var _g3 = 0;
			var _g2 = arr.length;
			while(_g3 < _g2) {
				var j = _g3++;
				if(i == j) {
					continue;
				}
				var othertag = arr[j];
				if(this.isSynonym(tag,othertag) || this.isSynonym(othertag,tag)) {
					if(kills.indexOf(tag) == -1) {
						kills.push(othertag);
					}
				} else {
					var unPreferred = this.isNotPreferred(tag,othertag);
					if(unPreferred == "") {
						unPreferred = this.isNotPreferred(othertag,tag);
					}
					if(unPreferred != "") {
						if(kills.indexOf(unPreferred) == -1) {
							kills.push(unPreferred);
						}
					}
				}
			}
		}
		var _g4 = 0;
		while(_g4 < kills.length) {
			var kill = kills[_g4];
			++_g4;
			HxOverrides.remove(arr,kill);
		}
		return arr;
	}
	,isNotPreferred: function(a,b) {
		if(a == "3959" && b == "1716") {
			return b;
		}
		if(a == "3859") {
			if(b == "128" || b == "7368" || b == "3841" || b == "3843" || b == "1685" || b == "17770") {
				return a;
			}
		}
		if(a == "5611") {
			if(b == "6650" || b == "12095" || b == "24904" || b == "4667" || b == "4345" || b == "5228") {
				return a;
			}
		}
		if(a == "24904") {
			if(b == "6650" || b == "12095" || b == "5611" || b == "4667" || b == "4345" || b == "5228") {
				return a;
			}
		}
		if(a == "1677") {
			console.log("TURN BASED a == " + a + " b == " + b);
			if(b == "1741" || b == "4325" || b == "14139") {
				return a;
			}
		}
		if(a == "3871") {
			if(b == "4736" || b == "4975") {
				return a;
			}
		}
		return "";
	}
	,isSynonym: function(a,b) {
		if(a == "1719" && b == "4136") {
			return true;
		}
		return false;
	}
	,compare: function(focusedTags,otherTags) {
		var focusCategories = [];
		var otherCategories = [];
		var report = { focus : { categories : [], counts : new haxe_ds_StringMap()}, other : { categories : [], counts : new haxe_ds_StringMap()}, matches : []};
		var i = 0;
		var _g = 0;
		while(_g < focusedTags.length) {
			var tag = focusedTags[_g];
			++_g;
			var id = tag.tagid;
			var value = tag.count;
			var _this = report.focus.counts;
			if(__map_reserved[id] != null) {
				_this.setReserved(id,value);
			} else {
				_this.h[id] = value;
			}
			var _this1 = this.id2Cat;
			var cats = __map_reserved[id] != null ? _this1.getReserved(id) : _this1.h[id];
			if(cats != null) {
				var _g1 = 0;
				while(_g1 < cats.length) {
					var cat = cats[_g1];
					++_g1;
					if(focusCategories.indexOf(cat) == -1) {
						focusCategories.push(cat);
						report.focus.categories.push({ name : cat, value : 0.0, multiplier : this.getCategoryWeight(cat)});
					}
					var index = focusCategories.indexOf(cat);
					var weight = report.focus.categories[index];
					weight.value += tag.count;
				}
				var _g11 = 0;
				while(_g11 < otherTags.length) {
					var oTag = otherTags[_g11];
					++_g11;
					var oid = oTag.tagid;
					if(id == oid) {
						var _g2 = 0;
						while(_g2 < cats.length) {
							var cat1 = cats[_g2];
							++_g2;
							var tagMatch = null;
							var _g3 = 0;
							var _g4 = report.matches;
							while(_g3 < _g4.length) {
								var match = _g4[_g3];
								++_g3;
								if(match.category == cat1) {
									tagMatch = match;
									break;
								}
							}
							if(tagMatch == null) {
								tagMatch = { category : cat1, tags : [id], weight : this.getCategoryWeight(cat1), focusCount : tag.count, otherCount : oTag.count};
								report.matches.push(tagMatch);
							} else {
								tagMatch.category = cat1;
								if(tagMatch.tags.indexOf(id) == -1) {
									tagMatch.tags.push(id);
									tagMatch.focusCount += tag.count;
									tagMatch.otherCount += oTag.count;
								}
							}
						}
						break;
					}
				}
			}
			++i;
		}
		var _g5 = 0;
		while(_g5 < otherTags.length) {
			var oTag1 = otherTags[_g5];
			++_g5;
			var oid1 = oTag1.tagid;
			var value1 = oTag1.count;
			var _this2 = report.other.counts;
			if(__map_reserved[oid1] != null) {
				_this2.setReserved(oid1,value1);
			} else {
				_this2.h[oid1] = value1;
			}
			var _this3 = this.id2Cat;
			var ocats = __map_reserved[oid1] != null ? _this3.getReserved(oid1) : _this3.h[oid1];
			if(ocats != null) {
				var _g12 = 0;
				while(_g12 < ocats.length) {
					var ocat = ocats[_g12];
					++_g12;
					if(otherCategories.indexOf(ocat) == -1) {
						otherCategories.push(ocat);
						report.other.categories.push({ name : ocat, value : 0.0, multiplier : this.getCategoryWeight(ocat)});
					}
					var index1 = otherCategories.indexOf(ocat);
					var weight1 = report.other.categories[index1];
					weight1.value += oTag1.count;
				}
			}
		}
		var byValue = function(a,b) {
			if(a.value * a.multiplier > b.value * b.multiplier) {
				return -1;
			}
			if(a.value * a.multiplier < b.value * b.multiplier) {
				return 1;
			}
			return 0;
		};
		report.focus.categories.sort(byValue);
		report.other.categories.sort(byValue);
		return report;
	}
	,getCategoryWeight: function(cat) {
		switch(cat) {
		case "adjective":
			return 1.00;
		case "assessment":
			return 3.00;
		case "audio":
			return 1.00;
		case "challenge":
			return 3.00;
		case "character":
			return 1.00;
		case "controls":
			return 2.00;
		case "coop":
			return 1.00;
		case "customization":
			return 1.00;
		case "feature":
			return 2.00;
		case "franchise":
			return 1.00;
		case "genre":
			return 2.00;
		case "hardware":
			return 1.00;
		case "level design":
			return 1.00;
		case "military":
			return 1.00;
		case "misc":
			return 0.50;
		case "mods":
			return 1.00;
		case "mood":
			return 2.00;
		case "multiplayer":
			return 1.00;
		case "noun":
			return 1.00;
		case "period":
			return 1.00;
		case "players":
			return 0.00;
		case "scary":
			return 1.00;
		case "setting":
			return 1.00;
		case "sex":
			return 4.00;
		case "sport":
			return 1.00;
		case "story":
			return 2.00;
		case "subgenre":
			return 4.00;
		case "supergenre":
			return 0.50;
		case "theme":
			return 2.00;
		case "tool":
			return 1.00;
		case "viewpoint":
			return 1.00;
		case "violence":
			return 4.00;
		case "visuals":
			return 1.00;
		case "warning":
			return 2.00;
		case "weak":
			return 0.25;
		default:
			return 1.00;
		}
	}
	,_addIdToCat: function(id,cat,map) {
		if((__map_reserved[cat] != null ? map.existsReserved(cat) : map.h.hasOwnProperty(cat)) == false) {
			var value = [];
			if(__map_reserved[cat] != null) {
				map.setReserved(cat,value);
			} else {
				map.h[cat] = value;
			}
		}
		var ids = __map_reserved[cat] != null ? map.getReserved(cat) : map.h[cat];
		if(ids.indexOf(id) == -1) {
			ids.push(id);
		}
	}
	,__class__: TagDB
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = true;
var haxe_Http = function(url) {
	this.url = url;
	this.headers = new List();
	this.params = new List();
	this.async = true;
	this.withCredentials = false;
};
haxe_Http.__name__ = true;
haxe_Http.prototype = {
	addParameter: function(param,value) {
		this.params.push({ param : param, value : value});
		return this;
	}
	,request: function(post) {
		var me = this;
		me.responseData = null;
		var r = this.req = js_Browser.createXMLHttpRequest();
		var onreadystatechange = function(_) {
			if(r.readyState != 4) {
				return;
			}
			var s;
			try {
				s = r.status;
			} catch( e ) {
				s = null;
			}
			if(s != null && "undefined" !== typeof window) {
				var protocol = window.location.protocol.toLowerCase();
				var rlocalProtocol = new EReg("^(?:about|app|app-storage|.+-extension|file|res|widget):$","");
				var isLocal = rlocalProtocol.match(protocol);
				if(isLocal) {
					if(r.responseText != null) {
						s = 200;
					} else {
						s = 404;
					}
				}
			}
			if(s == undefined) {
				s = null;
			}
			if(s != null) {
				me.onStatus(s);
			}
			if(s != null && s >= 200 && s < 400) {
				me.req = null;
				me.onData(me.responseData = r.responseText);
			} else if(s == null) {
				me.req = null;
				me.onError("Failed to connect or resolve host");
			} else {
				switch(s) {
				case 12007:
					me.req = null;
					me.onError("Unknown host");
					break;
				case 12029:
					me.req = null;
					me.onError("Failed to connect to host");
					break;
				default:
					me.req = null;
					me.responseData = r.responseText;
					me.onError("Http Error #" + r.status);
				}
			}
		};
		if(this.async) {
			r.onreadystatechange = onreadystatechange;
		}
		var uri = this.postData;
		if(uri != null) {
			post = true;
		} else {
			var _g_head = this.params.h;
			while(_g_head != null) {
				var val = _g_head.item;
				_g_head = _g_head.next;
				var p = val;
				if(uri == null) {
					uri = "";
				} else {
					uri += "&";
				}
				var s1 = p.param;
				var uri1 = encodeURIComponent(s1) + "=";
				var s2 = p.value;
				uri += uri1 + encodeURIComponent(s2);
			}
		}
		try {
			if(post) {
				r.open("POST",this.url,this.async);
			} else if(uri != null) {
				var question = this.url.split("?").length <= 1;
				r.open("GET",this.url + (question ? "?" : "&") + uri,this.async);
				uri = null;
			} else {
				r.open("GET",this.url,this.async);
			}
		} catch( e1 ) {
			if (e1 instanceof js__$Boot_HaxeError) e1 = e1.val;
			me.req = null;
			this.onError(e1.toString());
			return;
		}
		r.withCredentials = this.withCredentials;
		if(!Lambda.exists(this.headers,function(h) {
			return h.header == "Content-Type";
		}) && post && this.postData == null) {
			r.setRequestHeader("Content-Type","application/x-www-form-urlencoded");
		}
		var _g_head1 = this.headers.h;
		while(_g_head1 != null) {
			var val1 = _g_head1.item;
			_g_head1 = _g_head1.next;
			var h1 = val1;
			r.setRequestHeader(h1.header,h1.value);
		}
		r.send(uri);
		if(!this.async) {
			onreadystatechange(null);
		}
	}
	,onData: function(data) {
	}
	,onError: function(msg) {
	}
	,onStatus: function(status) {
	}
	,__class__: haxe_Http
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
haxe_Timer.__name__ = true;
haxe_Timer.prototype = {
	stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,toString: function() {
		var s_b = "";
		s_b += "{";
		var keys = this.arrayKeys();
		var _g1 = 0;
		var _g = keys.length;
		while(_g1 < _g) {
			var i = _g1++;
			var k = keys[i];
			s_b += k == null ? "null" : "" + k;
			s_b += " => ";
			s_b += Std.string(Std.string(__map_reserved[k] != null ? this.getReserved(k) : this.h[k]));
			if(i < keys.length - 1) {
				s_b += ", ";
			}
		}
		s_b += "}";
		return s_b;
	}
	,__class__: haxe_ds_StringMap
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__cast = function(o,t) {
	if(js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_Browser = function() { };
js_Browser.__name__ = true;
js_Browser.createXMLHttpRequest = function() {
	if(typeof XMLHttpRequest != "undefined") {
		return new XMLHttpRequest();
	}
	if(typeof ActiveXObject != "undefined") {
		return new ActiveXObject("Microsoft.XMLHTTP");
	}
	throw new js__$Boot_HaxeError("Unable to create XMLHttpRequest object.");
};
function $iterator(o) { if( o instanceof Array ) return function() { return HxOverrides.iter(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; }
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
var Int = { __name__ : ["Int"]};
var Dynamic = { __name__ : ["Dynamic"]};
var Float = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = { __name__ : ["Class"]};
var Enum = { };
var __map_reserved = {};
Main.breadcrumbs = [];
Main.breadcrumbTitles = [];
Main.breadcrumbBoxEntries = [];
Main.refreshHistory = [];
Main.cdnURL = "";
Main.lastMatchCount = 0;
Main.VARIANT = 0;
Main.LIST = 0;
Main.EMOJI = 0;
Main.HOVER = 0;
Main.APPID = "";
Main.LOGGED_IN = false;
Main.tempWishlist = [];
Main.justClickedBreadcrumb = false;
Main.justClickedAppBack = false;
Main.originalHistory = "";
Main.baseMap = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz01234567889+*";
js_Boot.__toStr = ({ }).toString;
Main.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
